
Nucleo_ForInternetConnection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e38  08004e38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e40  08004e40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e40  08004e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e44  08004e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000070  08004eb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08004eb8  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa93  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022d5  00000000  00000000  0002fb33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef8  00000000  00000000  00031e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  00032d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017eaf  00000000  00000000  00033af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb56  00000000  00000000  0004b9a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009043e  00000000  00000000  000574fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e793b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000462c  00000000  00000000  000e79b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ce8 	.word	0x08004ce8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004ce8 	.word	0x08004ce8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	4b26      	ldr	r3, [pc, #152]	; (8000634 <MX_GPIO_Init+0xb4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a25      	ldr	r2, [pc, #148]	; (8000634 <MX_GPIO_Init+0xb4>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b23      	ldr	r3, [pc, #140]	; (8000634 <MX_GPIO_Init+0xb4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <MX_GPIO_Init+0xb4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a1e      	ldr	r2, [pc, #120]	; (8000634 <MX_GPIO_Init+0xb4>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <MX_GPIO_Init+0xb4>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_GPIO_Init+0xb4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a17      	ldr	r2, [pc, #92]	; (8000634 <MX_GPIO_Init+0xb4>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_GPIO_Init+0xb4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	4812      	ldr	r0, [pc, #72]	; (8000638 <MX_GPIO_Init+0xb8>)
 80005f0:	f000 ffd8 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_GPIO_Init+0xbc>)
 80005fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	4619      	mov	r1, r3
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_GPIO_Init+0xc0>)
 800060a:	f000 fe49 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800060e:	2320      	movs	r3, #32
 8000610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	4619      	mov	r1, r3
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_GPIO_Init+0xb8>)
 8000626:	f000 fe3b 	bl	80012a0 <HAL_GPIO_Init>

}
 800062a:	bf00      	nop
 800062c:	3720      	adds	r7, #32
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40020000 	.word	0x40020000
 800063c:	10210000 	.word	0x10210000
 8000640:	40020800 	.word	0x40020800

08000644 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_I2C1_Init+0x50>)
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <MX_I2C1_Init+0x54>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_I2C1_Init+0x50>)
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_I2C1_Init+0x58>)
 8000652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_I2C1_Init+0x50>)
 8000662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_I2C1_Init+0x50>)
 8000682:	f000 ffc3 	bl	800160c <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 fa28 	bl	8000ae0 <Error_Handler>
  }

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000009c 	.word	0x2000009c
 8000698:	40005400 	.word	0x40005400
 800069c:	000186a0 	.word	0x000186a0

080006a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a19      	ldr	r2, [pc, #100]	; (8000724 <HAL_I2C_MspInit+0x84>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d12b      	bne.n	800071a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_I2C_MspInit+0x88>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <HAL_I2C_MspInit+0x88>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_I2C_MspInit+0x88>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006de:	23c0      	movs	r3, #192	; 0xc0
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e2:	2312      	movs	r3, #18
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ee:	2304      	movs	r3, #4
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <HAL_I2C_MspInit+0x8c>)
 80006fa:	f000 fdd1 	bl	80012a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_I2C_MspInit+0x88>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_I2C_MspInit+0x88>)
 8000708:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_I2C_MspInit+0x88>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40005400 	.word	0x40005400
 8000728:	40023800 	.word	0x40023800
 800072c:	40020400 	.word	0x40020400

08000730 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000738:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800073c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d013      	beq.n	8000770 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000748:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800074c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000750:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00b      	beq.n	8000770 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000758:	e000      	b.n	800075c <ITM_SendChar+0x2c>
    {
      __NOP();
 800075a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800075c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0f9      	beq.n	800075a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000766:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000770:	687b      	ldr	r3, [r7, #4]
}
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
 {
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ffd1 	bl	8000730 <ITM_SendChar>
	return (ch);
 800078e:	687b      	ldr	r3, [r7, #4]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_write>:

int _write(int file, char *ptr, int len)
 {
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	e009      	b.n	80007be <_write+0x26>
		__io_putchar(*ptr++);
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	60ba      	str	r2, [r7, #8]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ffe3 	bl	800077e <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	3301      	adds	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	dbf1      	blt.n	80007aa <_write+0x12>
	}
	return len;
 80007c6:	687b      	ldr	r3, [r7, #4]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
 {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007d6:	f000 fbbd 	bl	8000f54 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007da:	f000 f919 	bl	8000a10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007de:	f7ff fecf 	bl	8000580 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80007e2:	f000 fb1b 	bl	8000e1c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80007e6:	f7ff ff2d 	bl	8000644 <MX_I2C1_Init>
	MX_TIM3_Init();
 80007ea:	f000 fa77 	bl	8000cdc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	// Timer3 start
	HAL_TIM_Base_Start(&htim3);
 80007ee:	486d      	ldr	r0, [pc, #436]	; (80009a4 <main+0x1d4>)
 80007f0:	f002 fb23 	bl	8002e3a <HAL_TIM_Base_Start>
		//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		// i2c_data_to_send = 1;
		// i2c_current_buffer[0] = 7;
		// HAL_I2C_Master_Transmit(&hi2c1, I2C_EXPANDER_LED_WRITE_ADDR, i2c_current_buffer, 1, HAL_MAX_DELAY);
		if (1) {
			i2c_data_to_send = 1;
 80007f4:	4b6c      	ldr	r3, [pc, #432]	; (80009a8 <main+0x1d8>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
			i2c_current_buffer[0] = 0;
 80007fa:	4b6c      	ldr	r3, [pc, #432]	; (80009ac <main+0x1dc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit(&hi2c1, I2C_RTC_WRITE_ADDR,
 8000800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2301      	movs	r3, #1
 8000808:	4a68      	ldr	r2, [pc, #416]	; (80009ac <main+0x1dc>)
 800080a:	21a0      	movs	r1, #160	; 0xa0
 800080c:	4868      	ldr	r0, [pc, #416]	; (80009b0 <main+0x1e0>)
 800080e:	f001 f835 	bl	800187c <HAL_I2C_Master_Transmit>
					i2c_current_buffer, 1, HAL_MAX_DELAY);
			HAL_I2C_Master_Receive(&hi2c1, I2C_RTC_WRITE_ADDR,
 8000812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2330      	movs	r3, #48	; 0x30
 800081a:	4a64      	ldr	r2, [pc, #400]	; (80009ac <main+0x1dc>)
 800081c:	21a0      	movs	r1, #160	; 0xa0
 800081e:	4864      	ldr	r0, [pc, #400]	; (80009b0 <main+0x1e0>)
 8000820:	f001 f92a 	bl	8001a78 <HAL_I2C_Master_Receive>
					i2c_current_buffer, 0x30, HAL_MAX_DELAY);

			sprintf(str_hour_buffer, "Godzina: %d%d",
					(i2c_current_buffer[4] & 0xf0) >> 4,
 8000824:	4b61      	ldr	r3, [pc, #388]	; (80009ac <main+0x1dc>)
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	091b      	lsrs	r3, r3, #4
 800082a:	b2db      	uxtb	r3, r3
			sprintf(str_hour_buffer, "Godzina: %d%d",
 800082c:	461a      	mov	r2, r3
					(i2c_current_buffer[4] & 0x0f));
 800082e:	4b5f      	ldr	r3, [pc, #380]	; (80009ac <main+0x1dc>)
 8000830:	791b      	ldrb	r3, [r3, #4]
			sprintf(str_hour_buffer, "Godzina: %d%d",
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	495f      	ldr	r1, [pc, #380]	; (80009b4 <main+0x1e4>)
 8000838:	485f      	ldr	r0, [pc, #380]	; (80009b8 <main+0x1e8>)
 800083a:	f003 fb05 	bl	8003e48 <siprintf>
			sprintf(&str_hour_buffer[11], ":%d%d",
					(i2c_current_buffer[3] & 0xf0) >> 4,
 800083e:	4b5b      	ldr	r3, [pc, #364]	; (80009ac <main+0x1dc>)
 8000840:	78db      	ldrb	r3, [r3, #3]
 8000842:	091b      	lsrs	r3, r3, #4
 8000844:	b2db      	uxtb	r3, r3
			sprintf(&str_hour_buffer[11], ":%d%d",
 8000846:	461a      	mov	r2, r3
					(i2c_current_buffer[3] & 0x0f));
 8000848:	4b58      	ldr	r3, [pc, #352]	; (80009ac <main+0x1dc>)
 800084a:	78db      	ldrb	r3, [r3, #3]
			sprintf(&str_hour_buffer[11], ":%d%d",
 800084c:	f003 030f 	and.w	r3, r3, #15
 8000850:	495a      	ldr	r1, [pc, #360]	; (80009bc <main+0x1ec>)
 8000852:	485b      	ldr	r0, [pc, #364]	; (80009c0 <main+0x1f0>)
 8000854:	f003 faf8 	bl	8003e48 <siprintf>
			sprintf(&str_hour_buffer[14], ":%d%d",
					(i2c_current_buffer[2] & 0xf0) >> 4,
 8000858:	4b54      	ldr	r3, [pc, #336]	; (80009ac <main+0x1dc>)
 800085a:	789b      	ldrb	r3, [r3, #2]
 800085c:	091b      	lsrs	r3, r3, #4
 800085e:	b2db      	uxtb	r3, r3
			sprintf(&str_hour_buffer[14], ":%d%d",
 8000860:	461a      	mov	r2, r3
					(i2c_current_buffer[2] & 0x0f));
 8000862:	4b52      	ldr	r3, [pc, #328]	; (80009ac <main+0x1dc>)
 8000864:	789b      	ldrb	r3, [r3, #2]
			sprintf(&str_hour_buffer[14], ":%d%d",
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	4954      	ldr	r1, [pc, #336]	; (80009bc <main+0x1ec>)
 800086c:	4855      	ldr	r0, [pc, #340]	; (80009c4 <main+0x1f4>)
 800086e:	f003 faeb 	bl	8003e48 <siprintf>
			sprintf(&str_hour_buffer[17], ".%d%d\n",
					(i2c_current_buffer[1] & 0xf0) >> 4,
 8000872:	4b4e      	ldr	r3, [pc, #312]	; (80009ac <main+0x1dc>)
 8000874:	785b      	ldrb	r3, [r3, #1]
 8000876:	091b      	lsrs	r3, r3, #4
 8000878:	b2db      	uxtb	r3, r3
			sprintf(&str_hour_buffer[17], ".%d%d\n",
 800087a:	461a      	mov	r2, r3
					(i2c_current_buffer[1] & 0x0f));
 800087c:	4b4b      	ldr	r3, [pc, #300]	; (80009ac <main+0x1dc>)
 800087e:	785b      	ldrb	r3, [r3, #1]
			sprintf(&str_hour_buffer[17], ".%d%d\n",
 8000880:	f003 030f 	and.w	r3, r3, #15
 8000884:	4950      	ldr	r1, [pc, #320]	; (80009c8 <main+0x1f8>)
 8000886:	4851      	ldr	r0, [pc, #324]	; (80009cc <main+0x1fc>)
 8000888:	f003 fade 	bl	8003e48 <siprintf>

			sprintf(str_date_buffer, "Data: %d%d/",
					(i2c_current_buffer[5] & 0x30) >> 4,
 800088c:	4b47      	ldr	r3, [pc, #284]	; (80009ac <main+0x1dc>)
 800088e:	795b      	ldrb	r3, [r3, #5]
 8000890:	111b      	asrs	r3, r3, #4
			sprintf(str_date_buffer, "Data: %d%d/",
 8000892:	f003 0203 	and.w	r2, r3, #3
					i2c_current_buffer[5] & 0x0f);
 8000896:	4b45      	ldr	r3, [pc, #276]	; (80009ac <main+0x1dc>)
 8000898:	795b      	ldrb	r3, [r3, #5]
			sprintf(str_date_buffer, "Data: %d%d/",
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	494c      	ldr	r1, [pc, #304]	; (80009d0 <main+0x200>)
 80008a0:	484c      	ldr	r0, [pc, #304]	; (80009d4 <main+0x204>)
 80008a2:	f003 fad1 	bl	8003e48 <siprintf>
			sprintf(&str_date_buffer[9], "%d%d/",
					(i2c_current_buffer[6] & 0x10) >> 4,
 80008a6:	4b41      	ldr	r3, [pc, #260]	; (80009ac <main+0x1dc>)
 80008a8:	799b      	ldrb	r3, [r3, #6]
 80008aa:	111b      	asrs	r3, r3, #4
			sprintf(&str_date_buffer[9], "%d%d/",
 80008ac:	f003 0201 	and.w	r2, r3, #1
					i2c_current_buffer[6] & 0x0f);
 80008b0:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <main+0x1dc>)
 80008b2:	799b      	ldrb	r3, [r3, #6]
			sprintf(&str_date_buffer[9], "%d%d/",
 80008b4:	f003 030f 	and.w	r3, r3, #15
 80008b8:	4947      	ldr	r1, [pc, #284]	; (80009d8 <main+0x208>)
 80008ba:	4848      	ldr	r0, [pc, #288]	; (80009dc <main+0x20c>)
 80008bc:	f003 fac4 	bl	8003e48 <siprintf>

			sprintf(&str_date_buffer[12], "%d%d%d",(i2c_current_buffer[0x10] & 0xf0) >> 4, (i2c_current_buffer[0x10] & 0x0f), (i2c_current_buffer[0x11] & 0xf0) >> 4);
 80008c0:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <main+0x1dc>)
 80008c2:	7c1b      	ldrb	r3, [r3, #16]
 80008c4:	091b      	lsrs	r3, r3, #4
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4619      	mov	r1, r3
 80008ca:	4b38      	ldr	r3, [pc, #224]	; (80009ac <main+0x1dc>)
 80008cc:	7c1b      	ldrb	r3, [r3, #16]
 80008ce:	f003 020f 	and.w	r2, r3, #15
 80008d2:	4b36      	ldr	r3, [pc, #216]	; (80009ac <main+0x1dc>)
 80008d4:	7c5b      	ldrb	r3, [r3, #17]
 80008d6:	091b      	lsrs	r3, r3, #4
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	4613      	mov	r3, r2
 80008de:	460a      	mov	r2, r1
 80008e0:	493f      	ldr	r1, [pc, #252]	; (80009e0 <main+0x210>)
 80008e2:	4840      	ldr	r0, [pc, #256]	; (80009e4 <main+0x214>)
 80008e4:	f003 fab0 	bl	8003e48 <siprintf>
			sprintf(&str_date_buffer[16], "%d",
					(i2c_current_buffer[5] & 0xc0) >> 6);
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <main+0x1dc>)
 80008ea:	795b      	ldrb	r3, [r3, #5]
 80008ec:	099b      	lsrs	r3, r3, #6
 80008ee:	b2db      	uxtb	r3, r3
			sprintf(&str_date_buffer[16], "%d",
 80008f0:	461a      	mov	r2, r3
 80008f2:	493d      	ldr	r1, [pc, #244]	; (80009e8 <main+0x218>)
 80008f4:	483d      	ldr	r0, [pc, #244]	; (80009ec <main+0x21c>)
 80008f6:	f003 faa7 	bl	8003e48 <siprintf>

			tmp_val = (i2c_current_buffer[6] & 0xe0) >> 5;
 80008fa:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <main+0x1dc>)
 80008fc:	799b      	ldrb	r3, [r3, #6]
 80008fe:	095b      	lsrs	r3, r3, #5
 8000900:	71fb      	strb	r3, [r7, #7]
			switch (tmp_val) {
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b06      	cmp	r3, #6
 8000906:	d847      	bhi.n	8000998 <main+0x1c8>
 8000908:	a201      	add	r2, pc, #4	; (adr r2, 8000910 <main+0x140>)
 800090a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090e:	bf00      	nop
 8000910:	0800092d 	.word	0x0800092d
 8000914:	08000939 	.word	0x08000939
 8000918:	0800094b 	.word	0x0800094b
 800091c:	0800095d 	.word	0x0800095d
 8000920:	08000969 	.word	0x08000969
 8000924:	0800097b 	.word	0x0800097b
 8000928:	08000987 	.word	0x08000987
			case 0:
				sprintf(&str_date_buffer[17], " (pon)\n");
 800092c:	4a30      	ldr	r2, [pc, #192]	; (80009f0 <main+0x220>)
 800092e:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <main+0x224>)
 8000930:	cb03      	ldmia	r3!, {r0, r1}
 8000932:	6010      	str	r0, [r2, #0]
 8000934:	6051      	str	r1, [r2, #4]
				break;
 8000936:	e030      	b.n	800099a <main+0x1ca>
			case 1:
				sprintf(&str_date_buffer[17], " (wt)\n");
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <main+0x220>)
 800093a:	4a2f      	ldr	r2, [pc, #188]	; (80009f8 <main+0x228>)
 800093c:	6810      	ldr	r0, [r2, #0]
 800093e:	6018      	str	r0, [r3, #0]
 8000940:	8891      	ldrh	r1, [r2, #4]
 8000942:	7992      	ldrb	r2, [r2, #6]
 8000944:	8099      	strh	r1, [r3, #4]
 8000946:	719a      	strb	r2, [r3, #6]
				break;
 8000948:	e027      	b.n	800099a <main+0x1ca>
			case 2:
				sprintf(&str_date_buffer[17], " (sr)\n");
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <main+0x220>)
 800094c:	4a2b      	ldr	r2, [pc, #172]	; (80009fc <main+0x22c>)
 800094e:	6810      	ldr	r0, [r2, #0]
 8000950:	6018      	str	r0, [r3, #0]
 8000952:	8891      	ldrh	r1, [r2, #4]
 8000954:	7992      	ldrb	r2, [r2, #6]
 8000956:	8099      	strh	r1, [r3, #4]
 8000958:	719a      	strb	r2, [r3, #6]
				break;
 800095a:	e01e      	b.n	800099a <main+0x1ca>
			case 3:
				sprintf(&str_date_buffer[17], " (czw)\n");
 800095c:	4a24      	ldr	r2, [pc, #144]	; (80009f0 <main+0x220>)
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <main+0x230>)
 8000960:	cb03      	ldmia	r3!, {r0, r1}
 8000962:	6010      	str	r0, [r2, #0]
 8000964:	6051      	str	r1, [r2, #4]
				break;
 8000966:	e018      	b.n	800099a <main+0x1ca>
			case 4:
				sprintf(&str_date_buffer[17], " (pt)\n");
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <main+0x220>)
 800096a:	4a26      	ldr	r2, [pc, #152]	; (8000a04 <main+0x234>)
 800096c:	6810      	ldr	r0, [r2, #0]
 800096e:	6018      	str	r0, [r3, #0]
 8000970:	8891      	ldrh	r1, [r2, #4]
 8000972:	7992      	ldrb	r2, [r2, #6]
 8000974:	8099      	strh	r1, [r3, #4]
 8000976:	719a      	strb	r2, [r3, #6]
				break;
 8000978:	e00f      	b.n	800099a <main+0x1ca>
			case 5:
				sprintf(&str_date_buffer[17], " (sob)\n");
 800097a:	4a1d      	ldr	r2, [pc, #116]	; (80009f0 <main+0x220>)
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <main+0x238>)
 800097e:	cb03      	ldmia	r3!, {r0, r1}
 8000980:	6010      	str	r0, [r2, #0]
 8000982:	6051      	str	r1, [r2, #4]
				break;
 8000984:	e009      	b.n	800099a <main+0x1ca>
			case 6:
				sprintf(&str_date_buffer[17], " (nd)\n");
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <main+0x220>)
 8000988:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <main+0x23c>)
 800098a:	6810      	ldr	r0, [r2, #0]
 800098c:	6018      	str	r0, [r3, #0]
 800098e:	8891      	ldrh	r1, [r2, #4]
 8000990:	7992      	ldrb	r2, [r2, #6]
 8000992:	8099      	strh	r1, [r3, #4]
 8000994:	719a      	strb	r2, [r3, #6]
				break;
 8000996:	e000      	b.n	800099a <main+0x1ca>
			default:
				break;
 8000998:	bf00      	nop
				// i2c_current_buffer[0x01] = ;
				HAL_I2C_Master_Transmit(&hi2c1, I2C_RTC_WRITE_ADDR,
										i2c_current_buffer, 0x08, HAL_MAX_DELAY);
			}
		}
		HAL_Delay(300);
 800099a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800099e:	f000 fb4b 	bl	8001038 <HAL_Delay>
		if (1) {
 80009a2:	e727      	b.n	80007f4 <main+0x24>
 80009a4:	200003f4 	.word	0x200003f4
 80009a8:	200002f0 	.word	0x200002f0
 80009ac:	200000f0 	.word	0x200000f0
 80009b0:	2000009c 	.word	0x2000009c
 80009b4:	08004d00 	.word	0x08004d00
 80009b8:	200001f0 	.word	0x200001f0
 80009bc:	08004d10 	.word	0x08004d10
 80009c0:	200001fb 	.word	0x200001fb
 80009c4:	200001fe 	.word	0x200001fe
 80009c8:	08004d18 	.word	0x08004d18
 80009cc:	20000201 	.word	0x20000201
 80009d0:	08004d20 	.word	0x08004d20
 80009d4:	200002f4 	.word	0x200002f4
 80009d8:	08004d2c 	.word	0x08004d2c
 80009dc:	200002fd 	.word	0x200002fd
 80009e0:	08004d34 	.word	0x08004d34
 80009e4:	20000300 	.word	0x20000300
 80009e8:	08004d3c 	.word	0x08004d3c
 80009ec:	20000304 	.word	0x20000304
 80009f0:	20000305 	.word	0x20000305
 80009f4:	08004d40 	.word	0x08004d40
 80009f8:	08004d48 	.word	0x08004d48
 80009fc:	08004d50 	.word	0x08004d50
 8000a00:	08004d58 	.word	0x08004d58
 8000a04:	08004d60 	.word	0x08004d60
 8000a08:	08004d68 	.word	0x08004d68
 8000a0c:	08004d70 	.word	0x08004d70

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b094      	sub	sp, #80	; 0x50
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0320 	add.w	r3, r7, #32
 8000a1a:	2230      	movs	r2, #48	; 0x30
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 f9a6 	bl	8003d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <SystemClock_Config+0xc8>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a26      	ldr	r2, [pc, #152]	; (8000ad8 <SystemClock_Config+0xc8>)
 8000a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <SystemClock_Config+0xc8>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <SystemClock_Config+0xcc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a20      	ldr	r2, [pc, #128]	; (8000adc <SystemClock_Config+0xcc>)
 8000a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <SystemClock_Config+0xcc>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a74:	2310      	movs	r3, #16
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a80:	2310      	movs	r3, #16
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a84:	23c0      	movs	r3, #192	; 0xc0
 8000a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0320 	add.w	r3, r7, #32
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fd43 	bl	8002520 <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aa0:	f000 f81e 	bl	8000ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	2103      	movs	r1, #3
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 ff9d 	bl	8002a00 <HAL_RCC_ClockConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000acc:	f000 f808 	bl	8000ae0 <Error_Handler>
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	3750      	adds	r7, #80	; 0x50
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40007000 	.word	0x40007000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <Error_Handler+0x6>

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b26:	2007      	movs	r0, #7
 8000b28:	f000 fb78 	bl	800121c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b84:	f000 fa38 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <TIM3_IRQHandler+0x10>)
 8000b92:	f002 f976 	bl	8002e82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200003f4 	.word	0x200003f4

08000ba0 <_read>:
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	e00a      	b.n	8000bc8 <_read+0x28>
 8000bb2:	f3af 8000 	nop.w
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	60ba      	str	r2, [r7, #8]
 8000bbe:	b2ca      	uxtb	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbf0      	blt.n	8000bb2 <_read+0x12>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <_close>:
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <_fstat>:
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	2300      	movs	r3, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <_isatty>:
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <_lseek>:
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	2300      	movs	r3, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <_sbrk>:
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <_sbrk+0x5c>)
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <_sbrk+0x60>)
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <_sbrk+0x22>
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <_sbrk+0x64>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <_sbrk+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d207      	bcs.n	8000c84 <_sbrk+0x40>
 8000c74:	f003 f852 	bl	8003d1c <__errno>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c82:	e009      	b.n	8000c98 <_sbrk+0x54>
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <_sbrk+0x64>)
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20020000 	.word	0x20020000
 8000ca4:	00000400 	.word	0x00000400
 8000ca8:	2000008c 	.word	0x2000008c
 8000cac:	20000480 	.word	0x20000480

08000cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <SystemInit+0x28>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <SystemInit+0x28>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SystemInit+0x28>)
 8000cc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cca:	609a      	str	r2, [r3, #8]
#endif
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000cfa:	4a1e      	ldr	r2, [pc, #120]	; (8000d74 <MX_TIM3_Init+0x98>)
 8000cfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d20:	f002 f860 	bl	8002de4 <HAL_TIM_Base_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d2a:	f7ff fed9 	bl	8000ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d3c:	f002 f9a9 	bl	8003092 <HAL_TIM_ConfigClockSource>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f7ff fecb 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_TIM3_Init+0x94>)
 8000d58:	f002 fb94 	bl	8003484 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d62:	f7ff febd 	bl	8000ae0 <Error_Handler>
  }

}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200003f4 	.word	0x200003f4
 8000d74:	40000400 	.word	0x40000400

08000d78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_TIM_Base_MspInit+0x48>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d115      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_TIM_Base_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <HAL_TIM_Base_MspInit+0x4c>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_TIM_Base_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	201d      	movs	r0, #29
 8000dac:	f000 fa41 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000db0:	201d      	movs	r0, #29
 8000db2:	f000 fa5a 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	static uint32_t counter = 0;

	++counter;
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000dd8:	6013      	str	r3, [r2, #0]

	if (htim->Instance == TIM3){
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d10f      	bne.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (counter == 10000) {
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d109      	bne.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0x3c>
			counter = 0;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
			printf("Timer elapsed\n\n");
 8000df6:	4807      	ldr	r0, [pc, #28]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000df8:	f003 f81e 	bl	8003e38 <puts>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e00:	f000 fbe9 	bl	80015d6 <HAL_GPIO_TogglePin>
		}

	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000090 	.word	0x20000090
 8000e10:	40000400 	.word	0x40000400
 8000e14:	08004d78 	.word	0x08004d78
 8000e18:	40020000 	.word	0x40020000

08000e1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <MX_USART2_UART_Init+0x50>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e54:	f002 fb98 	bl	8003588 <HAL_UART_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e5e:	f7ff fe3f 	bl	8000ae0 <Error_Handler>
  }

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000434 	.word	0x20000434
 8000e6c:	40004400 	.word	0x40004400

08000e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0x84>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12b      	bne.n	8000eea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eda:	2307      	movs	r3, #7
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_UART_MspInit+0x8c>)
 8000ee6:	f000 f9db 	bl	80012a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40004400 	.word	0x40004400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <Reset_Handler>:
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopFillZerobss+0x14>
 8000f04:	2100      	movs	r1, #0
 8000f06:	e003      	b.n	8000f10 <LoopCopyDataInit>

08000f08 <CopyDataInit>:
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <LoopFillZerobss+0x18>)
 8000f0a:	585b      	ldr	r3, [r3, r1]
 8000f0c:	5043      	str	r3, [r0, r1]
 8000f0e:	3104      	adds	r1, #4

08000f10 <LoopCopyDataInit>:
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <LoopFillZerobss+0x1c>)
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <LoopFillZerobss+0x20>)
 8000f14:	1842      	adds	r2, r0, r1
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d3f6      	bcc.n	8000f08 <CopyDataInit>
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopFillZerobss+0x24>)
 8000f1c:	e002      	b.n	8000f24 <LoopFillZerobss>

08000f1e <FillZerobss>:
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f842 3b04 	str.w	r3, [r2], #4

08000f24 <LoopFillZerobss>:
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <LoopFillZerobss+0x28>)
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d3f9      	bcc.n	8000f1e <FillZerobss>
 8000f2a:	f7ff fec1 	bl	8000cb0 <SystemInit>
 8000f2e:	f002 fefb 	bl	8003d28 <__libc_init_array>
 8000f32:	f7ff fc4d 	bl	80007d0 <main>
 8000f36:	4770      	bx	lr
 8000f38:	20020000 	.word	0x20020000
 8000f3c:	08004e48 	.word	0x08004e48
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000070 	.word	0x20000070
 8000f48:	20000070 	.word	0x20000070
 8000f4c:	2000047c 	.word	0x2000047c

08000f50 <ADC_IRQHandler>:
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f94d 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f808 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff fdae 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f965 	bl	8001286 <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd4:	f000 f92d 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008
 800101c:	20000474 	.word	0x20000474

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000474 	.word	0x20000474

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff ffee 	bl	8001020 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001050:	d005      	beq.n	800105e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_Delay+0x40>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105e:	bf00      	nop
 8001060:	f7ff ffde 	bl	8001020 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8f7      	bhi.n	8001060 <HAL_Delay+0x28>
  {
  }
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000008 	.word	0x20000008

0800107c <__NVIC_SetPriorityGrouping>:
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	; (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff29 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff3e 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff8e 	bl	8001170 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff31 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa2 	bl	80011d8 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	e159      	b.n	8001570 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012bc:	2201      	movs	r2, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f040 8148 	bne.w	800156a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d00b      	beq.n	80012fa <HAL_GPIO_Init+0x5a>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ee:	2b11      	cmp	r3, #17
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b12      	cmp	r3, #18
 80012f8:	d130      	bne.n	800135c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001330:	2201      	movs	r2, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 0201 	and.w	r2, r3, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0xfc>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b12      	cmp	r3, #18
 800139a:	d123      	bne.n	80013e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	69b9      	ldr	r1, [r7, #24]
 80013e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0203 	and.w	r2, r3, #3
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80a2 	beq.w	800156a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b56      	ldr	r3, [pc, #344]	; (8001584 <HAL_GPIO_Init+0x2e4>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a55      	ldr	r2, [pc, #340]	; (8001584 <HAL_GPIO_Init+0x2e4>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b53      	ldr	r3, [pc, #332]	; (8001584 <HAL_GPIO_Init+0x2e4>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001442:	4a51      	ldr	r2, [pc, #324]	; (8001588 <HAL_GPIO_Init+0x2e8>)
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	220f      	movs	r2, #15
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a48      	ldr	r2, [pc, #288]	; (800158c <HAL_GPIO_Init+0x2ec>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d019      	beq.n	80014a2 <HAL_GPIO_Init+0x202>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a47      	ldr	r2, [pc, #284]	; (8001590 <HAL_GPIO_Init+0x2f0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d013      	beq.n	800149e <HAL_GPIO_Init+0x1fe>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a46      	ldr	r2, [pc, #280]	; (8001594 <HAL_GPIO_Init+0x2f4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00d      	beq.n	800149a <HAL_GPIO_Init+0x1fa>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a45      	ldr	r2, [pc, #276]	; (8001598 <HAL_GPIO_Init+0x2f8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d007      	beq.n	8001496 <HAL_GPIO_Init+0x1f6>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a44      	ldr	r2, [pc, #272]	; (800159c <HAL_GPIO_Init+0x2fc>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_GPIO_Init+0x1f2>
 800148e:	2304      	movs	r3, #4
 8001490:	e008      	b.n	80014a4 <HAL_GPIO_Init+0x204>
 8001492:	2307      	movs	r3, #7
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x204>
 8001496:	2303      	movs	r3, #3
 8001498:	e004      	b.n	80014a4 <HAL_GPIO_Init+0x204>
 800149a:	2302      	movs	r3, #2
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_Init+0x204>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_GPIO_Init+0x204>
 80014a2:	2300      	movs	r3, #0
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	f002 0203 	and.w	r2, r2, #3
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	4093      	lsls	r3, r2
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b4:	4934      	ldr	r1, [pc, #208]	; (8001588 <HAL_GPIO_Init+0x2e8>)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <HAL_GPIO_Init+0x300>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e6:	4a2e      	ldr	r2, [pc, #184]	; (80015a0 <HAL_GPIO_Init+0x300>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014ec:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <HAL_GPIO_Init+0x300>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001510:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <HAL_GPIO_Init+0x300>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <HAL_GPIO_Init+0x300>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153a:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_GPIO_Init+0x300>)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_GPIO_Init+0x300>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001564:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_GPIO_Init+0x300>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3301      	adds	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	2b0f      	cmp	r3, #15
 8001574:	f67f aea2 	bls.w	80012bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001578:	bf00      	nop
 800157a:	3724      	adds	r7, #36	; 0x24
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40023800 	.word	0x40023800
 8001588:	40013800 	.word	0x40013800
 800158c:	40020000 	.word	0x40020000
 8001590:	40020400 	.word	0x40020400
 8001594:	40020800 	.word	0x40020800
 8001598:	40020c00 	.word	0x40020c00
 800159c:	40021000 	.word	0x40021000
 80015a0:	40013c00 	.word	0x40013c00

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c0:	e003      	b.n	80015ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	041a      	lsls	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	401a      	ands	r2, r3
 80015ea:	887b      	ldrh	r3, [r7, #2]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d104      	bne.n	80015fa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	041a      	lsls	r2, r3, #16
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e11f      	b.n	800185e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d106      	bne.n	8001638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff f834 	bl	80006a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2224      	movs	r2, #36	; 0x24
 800163c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0201 	bic.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800165e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800166e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001670:	f001 fb90 	bl	8002d94 <HAL_RCC_GetPCLK1Freq>
 8001674:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4a7b      	ldr	r2, [pc, #492]	; (8001868 <HAL_I2C_Init+0x25c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d807      	bhi.n	8001690 <HAL_I2C_Init+0x84>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4a7a      	ldr	r2, [pc, #488]	; (800186c <HAL_I2C_Init+0x260>)
 8001684:	4293      	cmp	r3, r2
 8001686:	bf94      	ite	ls
 8001688:	2301      	movls	r3, #1
 800168a:	2300      	movhi	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	e006      	b.n	800169e <HAL_I2C_Init+0x92>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4a77      	ldr	r2, [pc, #476]	; (8001870 <HAL_I2C_Init+0x264>)
 8001694:	4293      	cmp	r3, r2
 8001696:	bf94      	ite	ls
 8001698:	2301      	movls	r3, #1
 800169a:	2300      	movhi	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0db      	b.n	800185e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4a72      	ldr	r2, [pc, #456]	; (8001874 <HAL_I2C_Init+0x268>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	0c9b      	lsrs	r3, r3, #18
 80016b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a64      	ldr	r2, [pc, #400]	; (8001868 <HAL_I2C_Init+0x25c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d802      	bhi.n	80016e0 <HAL_I2C_Init+0xd4>
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3301      	adds	r3, #1
 80016de:	e009      	b.n	80016f4 <HAL_I2C_Init+0xe8>
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	4a63      	ldr	r2, [pc, #396]	; (8001878 <HAL_I2C_Init+0x26c>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	099b      	lsrs	r3, r3, #6
 80016f2:	3301      	adds	r3, #1
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	430b      	orrs	r3, r1
 80016fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001706:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4956      	ldr	r1, [pc, #344]	; (8001868 <HAL_I2C_Init+0x25c>)
 8001710:	428b      	cmp	r3, r1
 8001712:	d80d      	bhi.n	8001730 <HAL_I2C_Init+0x124>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1e59      	subs	r1, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001722:	3301      	adds	r3, #1
 8001724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001728:	2b04      	cmp	r3, #4
 800172a:	bf38      	it	cc
 800172c:	2304      	movcc	r3, #4
 800172e:	e04f      	b.n	80017d0 <HAL_I2C_Init+0x1c4>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d111      	bne.n	800175c <HAL_I2C_Init+0x150>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1e58      	subs	r0, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	440b      	add	r3, r1
 8001746:	fbb0 f3f3 	udiv	r3, r0, r3
 800174a:	3301      	adds	r3, #1
 800174c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	e012      	b.n	8001782 <HAL_I2C_Init+0x176>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1e58      	subs	r0, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	0099      	lsls	r1, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001772:	3301      	adds	r3, #1
 8001774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_Init+0x17e>
 8001786:	2301      	movs	r3, #1
 8001788:	e022      	b.n	80017d0 <HAL_I2C_Init+0x1c4>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10e      	bne.n	80017b0 <HAL_I2C_Init+0x1a4>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1e58      	subs	r0, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6859      	ldr	r1, [r3, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	440b      	add	r3, r1
 80017a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a4:	3301      	adds	r3, #1
 80017a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ae:	e00f      	b.n	80017d0 <HAL_I2C_Init+0x1c4>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1e58      	subs	r0, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	0099      	lsls	r1, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	6809      	ldr	r1, [r1, #0]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69da      	ldr	r2, [r3, #28]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6911      	ldr	r1, [r2, #16]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68d2      	ldr	r2, [r2, #12]
 800180a:	4311      	orrs	r1, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	430b      	orrs	r3, r1
 8001812:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	000186a0 	.word	0x000186a0
 800186c:	001e847f 	.word	0x001e847f
 8001870:	003d08ff 	.word	0x003d08ff
 8001874:	431bde83 	.word	0x431bde83
 8001878:	10624dd3 	.word	0x10624dd3

0800187c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	461a      	mov	r2, r3
 8001888:	460b      	mov	r3, r1
 800188a:	817b      	strh	r3, [r7, #10]
 800188c:	4613      	mov	r3, r2
 800188e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff fbc6 	bl	8001020 <HAL_GetTick>
 8001894:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b20      	cmp	r3, #32
 80018a0:	f040 80e0 	bne.w	8001a64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2319      	movs	r3, #25
 80018aa:	2201      	movs	r2, #1
 80018ac:	4970      	ldr	r1, [pc, #448]	; (8001a70 <HAL_I2C_Master_Transmit+0x1f4>)
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fc58 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018ba:	2302      	movs	r3, #2
 80018bc:	e0d3      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_I2C_Master_Transmit+0x50>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e0cc      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x1ea>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d007      	beq.n	80018f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0201 	orr.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001900:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2221      	movs	r2, #33	; 0x21
 8001906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2210      	movs	r2, #16
 800190e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	893a      	ldrh	r2, [r7, #8]
 8001922:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4a50      	ldr	r2, [pc, #320]	; (8001a74 <HAL_I2C_Master_Transmit+0x1f8>)
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001934:	8979      	ldrh	r1, [r7, #10]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	6a3a      	ldr	r2, [r7, #32]
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f000 fac2 	bl	8001ec4 <I2C_MasterRequestWrite>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e08d      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001960:	e066      	b.n	8001a30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	6a39      	ldr	r1, [r7, #32]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fcd2 	bl	8002310 <I2C_WaitOnTXEFlagUntilTimeout>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00d      	beq.n	800198e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	2b04      	cmp	r3, #4
 8001978:	d107      	bne.n	800198a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001988:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06b      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d11b      	bne.n	8001a04 <HAL_I2C_Master_Transmit+0x188>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d017      	beq.n	8001a04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	6a39      	ldr	r1, [r7, #32]
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 fcc2 	bl	8002392 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00d      	beq.n	8001a30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d107      	bne.n	8001a2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e01a      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d194      	bne.n	8001962 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e000      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a64:	2302      	movs	r3, #2
  }
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	00100002 	.word	0x00100002
 8001a74:	ffff0000 	.word	0xffff0000

08001a78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	461a      	mov	r2, r3
 8001a84:	460b      	mov	r3, r1
 8001a86:	817b      	strh	r3, [r7, #10]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff fac8 	bl	8001020 <HAL_GetTick>
 8001a90:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b20      	cmp	r3, #32
 8001a9c:	f040 820b 	bne.w	8001eb6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2319      	movs	r3, #25
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	497c      	ldr	r1, [pc, #496]	; (8001c9c <HAL_I2C_Master_Receive+0x224>)
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fb5a 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e1fe      	b.n	8001eb8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_I2C_Master_Receive+0x50>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e1f7      	b.n	8001eb8 <HAL_I2C_Master_Receive+0x440>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d007      	beq.n	8001aee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0201 	orr.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001afc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2222      	movs	r2, #34	; 0x22
 8001b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2210      	movs	r2, #16
 8001b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	893a      	ldrh	r2, [r7, #8]
 8001b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4a5c      	ldr	r2, [pc, #368]	; (8001ca0 <HAL_I2C_Master_Receive+0x228>)
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b30:	8979      	ldrh	r1, [r7, #10]
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fa46 	bl	8001fc8 <I2C_MasterRequestRead>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e1b8      	b.n	8001eb8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d113      	bne.n	8001b76 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	623b      	str	r3, [r7, #32]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	623b      	str	r3, [r7, #32]
 8001b62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e18c      	b.n	8001e90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d11b      	bne.n	8001bb6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e16c      	b.n	8001e90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d11b      	bne.n	8001bf6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	e14c      	b.n	8001e90 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c1c:	e138      	b.n	8001e90 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	f200 80f1 	bhi.w	8001e0a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d123      	bne.n	8001c78 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 fbed 	bl	8002414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e139      	b.n	8001eb8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691a      	ldr	r2, [r3, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c76:	e10b      	b.n	8001e90 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d14e      	bne.n	8001d1e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c86:	2200      	movs	r2, #0
 8001c88:	4906      	ldr	r1, [pc, #24]	; (8001ca4 <HAL_I2C_Master_Receive+0x22c>)
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 fa6a 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d008      	beq.n	8001ca8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e10e      	b.n	8001eb8 <HAL_I2C_Master_Receive+0x440>
 8001c9a:	bf00      	nop
 8001c9c:	00100002 	.word	0x00100002
 8001ca0:	ffff0000 	.word	0xffff0000
 8001ca4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d1c:	e0b8      	b.n	8001e90 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	2200      	movs	r2, #0
 8001d26:	4966      	ldr	r1, [pc, #408]	; (8001ec0 <HAL_I2C_Master_Receive+0x448>)
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fa1b 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0bf      	b.n	8001eb8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d80:	2200      	movs	r2, #0
 8001d82:	494f      	ldr	r1, [pc, #316]	; (8001ec0 <HAL_I2C_Master_Receive+0x448>)
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f9ed 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e091      	b.n	8001eb8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e08:	e042      	b.n	8001e90 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 fb00 	bl	8002414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e04c      	b.n	8001eb8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d118      	bne.n	8001e90 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f47f aec2 	bne.w	8001c1e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001eb6:	2302      	movs	r3, #2
  }
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3728      	adds	r7, #40	; 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	00010004 	.word	0x00010004

08001ec4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d006      	beq.n	8001eee <I2C_MasterRequestWrite+0x2a>
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d003      	beq.n	8001eee <I2C_MasterRequestWrite+0x2a>
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001eec:	d108      	bne.n	8001f00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e00b      	b.n	8001f18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	2b12      	cmp	r3, #18
 8001f06:	d107      	bne.n	8001f18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 f91d 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00d      	beq.n	8001f4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f3e:	d103      	bne.n	8001f48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e035      	b.n	8001fb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f54:	d108      	bne.n	8001f68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f56:	897b      	ldrh	r3, [r7, #10]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f64:	611a      	str	r2, [r3, #16]
 8001f66:	e01b      	b.n	8001fa0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f68:	897b      	ldrh	r3, [r7, #10]
 8001f6a:	11db      	asrs	r3, r3, #7
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f003 0306 	and.w	r3, r3, #6
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f063 030f 	orn	r3, r3, #15
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <I2C_MasterRequestWrite+0xfc>)
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f943 	bl	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e010      	b.n	8001fb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f96:	897b      	ldrh	r3, [r7, #10]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4907      	ldr	r1, [pc, #28]	; (8001fc4 <I2C_MasterRequestWrite+0x100>)
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f933 	bl	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	00010008 	.word	0x00010008
 8001fc4:	00010002 	.word	0x00010002

08001fc8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d006      	beq.n	8002002 <I2C_MasterRequestRead+0x3a>
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d003      	beq.n	8002002 <I2C_MasterRequestRead+0x3a>
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002000:	d108      	bne.n	8002014 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e00b      	b.n	800202c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	2b11      	cmp	r3, #17
 800201a:	d107      	bne.n	800202c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800202a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 f893 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00d      	beq.n	8002060 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002052:	d103      	bne.n	800205c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e079      	b.n	8002154 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002068:	d108      	bne.n	800207c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800206a:	897b      	ldrh	r3, [r7, #10]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	e05f      	b.n	800213c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800207c:	897b      	ldrh	r3, [r7, #10]
 800207e:	11db      	asrs	r3, r3, #7
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f003 0306 	and.w	r3, r3, #6
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f063 030f 	orn	r3, r3, #15
 800208c:	b2da      	uxtb	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4930      	ldr	r1, [pc, #192]	; (800215c <I2C_MasterRequestRead+0x194>)
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f8b9 	bl	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e054      	b.n	8002154 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020aa:	897b      	ldrh	r3, [r7, #10]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4929      	ldr	r1, [pc, #164]	; (8002160 <I2C_MasterRequestRead+0x198>)
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f8a9 	bl	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e044      	b.n	8002154 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f831 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00d      	beq.n	8002124 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002116:	d103      	bne.n	8002120 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e017      	b.n	8002154 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002124:	897b      	ldrh	r3, [r7, #10]
 8002126:	11db      	asrs	r3, r3, #7
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f003 0306 	and.w	r3, r3, #6
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f063 030e 	orn	r3, r3, #14
 8002134:	b2da      	uxtb	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4907      	ldr	r1, [pc, #28]	; (8002160 <I2C_MasterRequestRead+0x198>)
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f865 	bl	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	00010008 	.word	0x00010008
 8002160:	00010002 	.word	0x00010002

08002164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002174:	e025      	b.n	80021c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800217c:	d021      	beq.n	80021c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217e:	f7fe ff4f 	bl	8001020 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d302      	bcc.n	8002194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d116      	bne.n	80021c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f043 0220 	orr.w	r2, r3, #32
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e023      	b.n	800220a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d10d      	bne.n	80021e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4013      	ands	r3, r2
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bf0c      	ite	eq
 80021de:	2301      	moveq	r3, #1
 80021e0:	2300      	movne	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	e00c      	b.n	8002202 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4013      	ands	r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf0c      	ite	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	2300      	movne	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	429a      	cmp	r2, r3
 8002206:	d0b6      	beq.n	8002176 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002220:	e051      	b.n	80022c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002230:	d123      	bne.n	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002240:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800224a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f043 0204 	orr.w	r2, r3, #4
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e046      	b.n	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002280:	d021      	beq.n	80022c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002282:	f7fe fecd 	bl	8001020 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	d302      	bcc.n	8002298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d116      	bne.n	80022c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f043 0220 	orr.w	r2, r3, #32
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e020      	b.n	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d10c      	bne.n	80022ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	43da      	mvns	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4013      	ands	r3, r2
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bf14      	ite	ne
 80022e2:	2301      	movne	r3, #1
 80022e4:	2300      	moveq	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	e00b      	b.n	8002302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	43da      	mvns	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4013      	ands	r3, r2
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf14      	ite	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	2300      	moveq	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d18d      	bne.n	8002222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800231c:	e02d      	b.n	800237a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f8ce 	bl	80024c0 <I2C_IsAcknowledgeFailed>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e02d      	b.n	800238a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002334:	d021      	beq.n	800237a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002336:	f7fe fe73 	bl	8001020 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d116      	bne.n	800237a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f043 0220 	orr.w	r2, r3, #32
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e007      	b.n	800238a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002384:	2b80      	cmp	r3, #128	; 0x80
 8002386:	d1ca      	bne.n	800231e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800239e:	e02d      	b.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f88d 	bl	80024c0 <I2C_IsAcknowledgeFailed>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e02d      	b.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023b6:	d021      	beq.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b8:	f7fe fe32 	bl	8001020 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d302      	bcc.n	80023ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d116      	bne.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f043 0220 	orr.w	r2, r3, #32
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e007      	b.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b04      	cmp	r3, #4
 8002408:	d1ca      	bne.n	80023a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002420:	e042      	b.n	80024a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b10      	cmp	r3, #16
 800242e:	d119      	bne.n	8002464 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0210 	mvn.w	r2, #16
 8002438:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e029      	b.n	80024b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002464:	f7fe fddc 	bl	8001020 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	429a      	cmp	r2, r3
 8002472:	d302      	bcc.n	800247a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d116      	bne.n	80024a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f043 0220 	orr.w	r2, r3, #32
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e007      	b.n	80024b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b2:	2b40      	cmp	r3, #64	; 0x40
 80024b4:	d1b5      	bne.n	8002422 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d6:	d11b      	bne.n	8002510 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f043 0204 	orr.w	r2, r3, #4
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e25b      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d075      	beq.n	800262a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800253e:	4ba3      	ldr	r3, [pc, #652]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d00c      	beq.n	8002564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254a:	4ba0      	ldr	r3, [pc, #640]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002552:	2b08      	cmp	r3, #8
 8002554:	d112      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002556:	4b9d      	ldr	r3, [pc, #628]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002562:	d10b      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	4b99      	ldr	r3, [pc, #612]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d05b      	beq.n	8002628 <HAL_RCC_OscConfig+0x108>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d157      	bne.n	8002628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e236      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x74>
 8002586:	4b91      	ldr	r3, [pc, #580]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a90      	ldr	r2, [pc, #576]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x98>
 800259e:	4b8b      	ldr	r3, [pc, #556]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a8a      	ldr	r2, [pc, #552]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a87      	ldr	r2, [pc, #540]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 80025b8:	4b84      	ldr	r3, [pc, #528]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a83      	ldr	r2, [pc, #524]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b81      	ldr	r3, [pc, #516]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a80      	ldr	r2, [pc, #512]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fd22 	bl	8001020 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe fd1e 	bl	8001020 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e1fb      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xc0>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe fd0e 	bl	8001020 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe fd0a 	bl	8001020 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	; 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1e7      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	4b6c      	ldr	r3, [pc, #432]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0xe8>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d063      	beq.n	80026fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002636:	4b65      	ldr	r3, [pc, #404]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002642:	4b62      	ldr	r3, [pc, #392]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800264a:	2b08      	cmp	r3, #8
 800264c:	d11c      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264e:	4b5f      	ldr	r3, [pc, #380]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	4b5c      	ldr	r3, [pc, #368]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e1bb      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b56      	ldr	r3, [pc, #344]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4952      	ldr	r1, [pc, #328]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	e03a      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002690:	4b4f      	ldr	r3, [pc, #316]	; (80027d0 <HAL_RCC_OscConfig+0x2b0>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7fe fcc3 	bl	8001020 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269e:	f7fe fcbf 	bl	8001020 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e19c      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	4b46      	ldr	r3, [pc, #280]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026bc:	4b43      	ldr	r3, [pc, #268]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4940      	ldr	r1, [pc, #256]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
 80026d0:	e015      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d2:	4b3f      	ldr	r3, [pc, #252]	; (80027d0 <HAL_RCC_OscConfig+0x2b0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fca2 	bl	8001020 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e0:	f7fe fc9e 	bl	8001020 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e17b      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d030      	beq.n	800276c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d016      	beq.n	8002740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002712:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <HAL_RCC_OscConfig+0x2b4>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7fe fc82 	bl	8001020 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002720:	f7fe fc7e 	bl	8001020 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e15b      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x200>
 800273e:	e015      	b.n	800276c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002740:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCC_OscConfig+0x2b4>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7fe fc6b 	bl	8001020 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274e:	f7fe fc67 	bl	8001020 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e144      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f0      	bne.n	800274e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a0 	beq.w	80028ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10f      	bne.n	80027aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_OscConfig+0x2b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d121      	bne.n	80027fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_RCC_OscConfig+0x2b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <HAL_RCC_OscConfig+0x2b8>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c2:	f7fe fc2d 	bl	8001020 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	e011      	b.n	80027ee <HAL_RCC_OscConfig+0x2ce>
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	42470000 	.word	0x42470000
 80027d4:	42470e80 	.word	0x42470e80
 80027d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027dc:	f7fe fc20 	bl	8001020 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e0fd      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b81      	ldr	r3, [pc, #516]	; (80029f4 <HAL_RCC_OscConfig+0x4d4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d106      	bne.n	8002810 <HAL_RCC_OscConfig+0x2f0>
 8002802:	4b7d      	ldr	r3, [pc, #500]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	4a7c      	ldr	r2, [pc, #496]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6713      	str	r3, [r2, #112]	; 0x70
 800280e:	e01c      	b.n	800284a <HAL_RCC_OscConfig+0x32a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b05      	cmp	r3, #5
 8002816:	d10c      	bne.n	8002832 <HAL_RCC_OscConfig+0x312>
 8002818:	4b77      	ldr	r3, [pc, #476]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a76      	ldr	r2, [pc, #472]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
 8002824:	4b74      	ldr	r3, [pc, #464]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	4a73      	ldr	r2, [pc, #460]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6713      	str	r3, [r2, #112]	; 0x70
 8002830:	e00b      	b.n	800284a <HAL_RCC_OscConfig+0x32a>
 8002832:	4b71      	ldr	r3, [pc, #452]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	4a70      	ldr	r2, [pc, #448]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6713      	str	r3, [r2, #112]	; 0x70
 800283e:	4b6e      	ldr	r3, [pc, #440]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	4a6d      	ldr	r2, [pc, #436]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d015      	beq.n	800287e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002852:	f7fe fbe5 	bl	8001020 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fe fbe1 	bl	8001020 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f241 3288 	movw	r2, #5000	; 0x1388
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0bc      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ee      	beq.n	800285a <HAL_RCC_OscConfig+0x33a>
 800287c:	e014      	b.n	80028a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7fe fbcf 	bl	8001020 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fbcb 	bl	8001020 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0a6      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289c:	4b56      	ldr	r3, [pc, #344]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ee      	bne.n	8002886 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d105      	bne.n	80028ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ae:	4b52      	ldr	r3, [pc, #328]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a51      	ldr	r2, [pc, #324]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 80028b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8092 	beq.w	80029e8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028c4:	4b4c      	ldr	r3, [pc, #304]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d05c      	beq.n	800298a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d141      	bne.n	800295c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	4b48      	ldr	r3, [pc, #288]	; (80029fc <HAL_RCC_OscConfig+0x4dc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe fb9f 	bl	8001020 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fb9b 	bl	8001020 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e078      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f8:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69da      	ldr	r2, [r3, #28]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	019b      	lsls	r3, r3, #6
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	3b01      	subs	r3, #1
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	061b      	lsls	r3, r3, #24
 8002928:	4933      	ldr	r1, [pc, #204]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800292e:	4b33      	ldr	r3, [pc, #204]	; (80029fc <HAL_RCC_OscConfig+0x4dc>)
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe fb74 	bl	8001020 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293c:	f7fe fb70 	bl	8001020 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e04d      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294e:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x41c>
 800295a:	e045      	b.n	80029e8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295c:	4b27      	ldr	r3, [pc, #156]	; (80029fc <HAL_RCC_OscConfig+0x4dc>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe fb5d 	bl	8001020 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296a:	f7fe fb59 	bl	8001020 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e036      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297c:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0x44a>
 8002988:	e02e      	b.n	80029e8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e029      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002996:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_RCC_OscConfig+0x4d8>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d11c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d115      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029be:	4013      	ands	r3, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10d      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d106      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40007000 	.word	0x40007000
 80029f8:	40023800 	.word	0x40023800
 80029fc:	42470060 	.word	0x42470060

08002a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0cc      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a14:	4b68      	ldr	r3, [pc, #416]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d90c      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b65      	ldr	r3, [pc, #404]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b63      	ldr	r3, [pc, #396]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0b8      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d020      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a54:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a58      	ldr	r2, [pc, #352]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a6c:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a78:	4b50      	ldr	r3, [pc, #320]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	494d      	ldr	r1, [pc, #308]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d044      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d119      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e07f      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d003      	beq.n	8002abe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002abe:	4b3f      	ldr	r3, [pc, #252]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e06f      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ace:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e067      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ade:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f023 0203 	bic.w	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4934      	ldr	r1, [pc, #208]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af0:	f7fe fa96 	bl	8001020 <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af8:	f7fe fa92 	bl	8001020 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e04f      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 020c 	and.w	r2, r3, #12
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d1eb      	bne.n	8002af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d20c      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e032      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4916      	ldr	r1, [pc, #88]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	490e      	ldr	r1, [pc, #56]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b86:	f000 f821 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	5cd3      	ldrb	r3, [r2, r3]
 8002b9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b9e:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe f9f6 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023c00 	.word	0x40023c00
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	08004d88 	.word	0x08004d88
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	20000004 	.word	0x20000004

08002bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be2:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d007      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x32>
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d008      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x38>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 80b4 	bne.w	8002d60 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b5e      	ldr	r3, [pc, #376]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002bfa:	60bb      	str	r3, [r7, #8]
       break;
 8002bfc:	e0b3      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bfe:	4b5e      	ldr	r3, [pc, #376]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c00:	60bb      	str	r3, [r7, #8]
      break;
 8002c02:	e0b0      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c04:	4b5a      	ldr	r3, [pc, #360]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c0e:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d04a      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b55      	ldr	r3, [pc, #340]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	f04f 0400 	mov.w	r4, #0
 8002c24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	ea03 0501 	and.w	r5, r3, r1
 8002c30:	ea04 0602 	and.w	r6, r4, r2
 8002c34:	4629      	mov	r1, r5
 8002c36:	4632      	mov	r2, r6
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	f04f 0400 	mov.w	r4, #0
 8002c40:	0154      	lsls	r4, r2, #5
 8002c42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c46:	014b      	lsls	r3, r1, #5
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4622      	mov	r2, r4
 8002c4c:	1b49      	subs	r1, r1, r5
 8002c4e:	eb62 0206 	sbc.w	r2, r2, r6
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	f04f 0400 	mov.w	r4, #0
 8002c5a:	0194      	lsls	r4, r2, #6
 8002c5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c60:	018b      	lsls	r3, r1, #6
 8002c62:	1a5b      	subs	r3, r3, r1
 8002c64:	eb64 0402 	sbc.w	r4, r4, r2
 8002c68:	f04f 0100 	mov.w	r1, #0
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	00e2      	lsls	r2, r4, #3
 8002c72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c76:	00d9      	lsls	r1, r3, #3
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4614      	mov	r4, r2
 8002c7c:	195b      	adds	r3, r3, r5
 8002c7e:	eb44 0406 	adc.w	r4, r4, r6
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	0262      	lsls	r2, r4, #9
 8002c8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c90:	0259      	lsls	r1, r3, #9
 8002c92:	460b      	mov	r3, r1
 8002c94:	4614      	mov	r4, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	4621      	mov	r1, r4
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f04f 0400 	mov.w	r4, #0
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4623      	mov	r3, r4
 8002ca4:	f7fd faec 	bl	8000280 <__aeabi_uldivmod>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	460c      	mov	r4, r1
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	e049      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb0:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	f04f 0400 	mov.w	r4, #0
 8002cba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	ea03 0501 	and.w	r5, r3, r1
 8002cc6:	ea04 0602 	and.w	r6, r4, r2
 8002cca:	4629      	mov	r1, r5
 8002ccc:	4632      	mov	r2, r6
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	f04f 0400 	mov.w	r4, #0
 8002cd6:	0154      	lsls	r4, r2, #5
 8002cd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cdc:	014b      	lsls	r3, r1, #5
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4622      	mov	r2, r4
 8002ce2:	1b49      	subs	r1, r1, r5
 8002ce4:	eb62 0206 	sbc.w	r2, r2, r6
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	f04f 0400 	mov.w	r4, #0
 8002cf0:	0194      	lsls	r4, r2, #6
 8002cf2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cf6:	018b      	lsls	r3, r1, #6
 8002cf8:	1a5b      	subs	r3, r3, r1
 8002cfa:	eb64 0402 	sbc.w	r4, r4, r2
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	00e2      	lsls	r2, r4, #3
 8002d08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d0c:	00d9      	lsls	r1, r3, #3
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4614      	mov	r4, r2
 8002d12:	195b      	adds	r3, r3, r5
 8002d14:	eb44 0406 	adc.w	r4, r4, r6
 8002d18:	f04f 0100 	mov.w	r1, #0
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	02a2      	lsls	r2, r4, #10
 8002d22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d26:	0299      	lsls	r1, r3, #10
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4614      	mov	r4, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	4621      	mov	r1, r4
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f04f 0400 	mov.w	r4, #0
 8002d36:	461a      	mov	r2, r3
 8002d38:	4623      	mov	r3, r4
 8002d3a:	f7fd faa1 	bl	8000280 <__aeabi_uldivmod>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	460c      	mov	r4, r1
 8002d42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	0c1b      	lsrs	r3, r3, #16
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	60bb      	str	r3, [r7, #8]
      break;
 8002d5e:	e002      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d62:	60bb      	str	r3, [r7, #8]
      break;
 8002d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d66:	68bb      	ldr	r3, [r7, #8]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	00f42400 	.word	0x00f42400
 8002d78:	007a1200 	.word	0x007a1200

08002d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000000 	.word	0x20000000

08002d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d98:	f7ff fff0 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002d9c:	4601      	mov	r1, r0
 8002d9e:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	0a9b      	lsrs	r3, r3, #10
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	4a03      	ldr	r2, [pc, #12]	; (8002db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002daa:	5cd3      	ldrb	r3, [r2, r3]
 8002dac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800
 8002db8:	08004d98 	.word	0x08004d98

08002dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dc0:	f7ff ffdc 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	0b5b      	lsrs	r3, r3, #13
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	08004d98 	.word	0x08004d98

08002de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e01d      	b.n	8002e32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fd ffb4 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f000 fa14 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d007      	beq.n	8002e6c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d122      	bne.n	8002ede <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d11b      	bne.n	8002ede <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0202 	mvn.w	r2, #2
 8002eae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f9a5 	bl	8003214 <HAL_TIM_IC_CaptureCallback>
 8002eca:	e005      	b.n	8002ed8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f997 	bl	8003200 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f9a8 	bl	8003228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d122      	bne.n	8002f32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d11b      	bne.n	8002f32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f06f 0204 	mvn.w	r2, #4
 8002f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f97b 	bl	8003214 <HAL_TIM_IC_CaptureCallback>
 8002f1e:	e005      	b.n	8002f2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f96d 	bl	8003200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f97e 	bl	8003228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d122      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d11b      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f06f 0208 	mvn.w	r2, #8
 8002f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f951 	bl	8003214 <HAL_TIM_IC_CaptureCallback>
 8002f72:	e005      	b.n	8002f80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f943 	bl	8003200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f954 	bl	8003228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d122      	bne.n	8002fda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d11b      	bne.n	8002fda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f06f 0210 	mvn.w	r2, #16
 8002faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2208      	movs	r2, #8
 8002fb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f927 	bl	8003214 <HAL_TIM_IC_CaptureCallback>
 8002fc6:	e005      	b.n	8002fd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f919 	bl	8003200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f92a 	bl	8003228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d10e      	bne.n	8003006 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f06f 0201 	mvn.w	r2, #1
 8002ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7fd fee1 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b80      	cmp	r3, #128	; 0x80
 8003012:	d10e      	bne.n	8003032 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b80      	cmp	r3, #128	; 0x80
 8003020:	d107      	bne.n	8003032 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800302a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 faa1 	bl	8003574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b40      	cmp	r3, #64	; 0x40
 800303e:	d10e      	bne.n	800305e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	d107      	bne.n	800305e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f8ef 	bl	800323c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b20      	cmp	r3, #32
 800306a:	d10e      	bne.n	800308a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b20      	cmp	r3, #32
 8003078:	d107      	bne.n	800308a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f06f 0220 	mvn.w	r2, #32
 8003082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fa6b 	bl	8003560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_ConfigClockSource+0x18>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e0a6      	b.n	80031f8 <HAL_TIM_ConfigClockSource+0x166>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030d0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b40      	cmp	r3, #64	; 0x40
 80030e0:	d067      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x120>
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d80b      	bhi.n	80030fe <HAL_TIM_ConfigClockSource+0x6c>
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d073      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x140>
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d802      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x62>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d06f      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80030f2:	e078      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d06c      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x140>
 80030f8:	2b30      	cmp	r3, #48	; 0x30
 80030fa:	d06a      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80030fc:	e073      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030fe:	2b70      	cmp	r3, #112	; 0x70
 8003100:	d00d      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x8c>
 8003102:	2b70      	cmp	r3, #112	; 0x70
 8003104:	d804      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x7e>
 8003106:	2b50      	cmp	r3, #80	; 0x50
 8003108:	d033      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0xe0>
 800310a:	2b60      	cmp	r3, #96	; 0x60
 800310c:	d041      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800310e:	e06a      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003114:	d066      	beq.n	80031e4 <HAL_TIM_ConfigClockSource+0x152>
 8003116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311a:	d017      	beq.n	800314c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800311c:	e063      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f000 f989 	bl	8003444 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003140:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	609a      	str	r2, [r3, #8]
      break;
 800314a:	e04c      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f000 f972 	bl	8003444 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800316e:	609a      	str	r2, [r3, #8]
      break;
 8003170:	e039      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	461a      	mov	r2, r3
 8003180:	f000 f8e6 	bl	8003350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2150      	movs	r1, #80	; 0x50
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f93f 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 8003190:	e029      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 f905 	bl	80033ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2160      	movs	r1, #96	; 0x60
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f92f 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 80031b0:	e019      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	461a      	mov	r2, r3
 80031c0:	f000 f8c6 	bl	8003350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2140      	movs	r1, #64	; 0x40
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f91f 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 80031d0:	e009      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f000 f916 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 80031e2:	e000      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80031e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a34      	ldr	r2, [pc, #208]	; (8003334 <TIM_Base_SetConfig+0xe4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00f      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d00b      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a31      	ldr	r2, [pc, #196]	; (8003338 <TIM_Base_SetConfig+0xe8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a30      	ldr	r2, [pc, #192]	; (800333c <TIM_Base_SetConfig+0xec>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <TIM_Base_SetConfig+0xf0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d108      	bne.n	800329a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a25      	ldr	r2, [pc, #148]	; (8003334 <TIM_Base_SetConfig+0xe4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01b      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a8:	d017      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a22      	ldr	r2, [pc, #136]	; (8003338 <TIM_Base_SetConfig+0xe8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a21      	ldr	r2, [pc, #132]	; (800333c <TIM_Base_SetConfig+0xec>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00f      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a20      	ldr	r2, [pc, #128]	; (8003340 <TIM_Base_SetConfig+0xf0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00b      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <TIM_Base_SetConfig+0xf4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <TIM_Base_SetConfig+0xf8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1d      	ldr	r2, [pc, #116]	; (800334c <TIM_Base_SetConfig+0xfc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d108      	bne.n	80032ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a08      	ldr	r2, [pc, #32]	; (8003334 <TIM_Base_SetConfig+0xe4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	615a      	str	r2, [r3, #20]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40010000 	.word	0x40010000
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800
 8003340:	40000c00 	.word	0x40000c00
 8003344:	40014000 	.word	0x40014000
 8003348:	40014400 	.word	0x40014400
 800334c:	40014800 	.word	0x40014800

08003350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800337a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f023 030a 	bic.w	r3, r3, #10
 800338c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	621a      	str	r2, [r3, #32]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b087      	sub	sp, #28
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0210 	bic.w	r2, r3, #16
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	031b      	lsls	r3, r3, #12
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	f043 0307 	orr.w	r3, r3, #7
 8003430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	609a      	str	r2, [r3, #8]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800345e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	021a      	lsls	r2, r3, #8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	431a      	orrs	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4313      	orrs	r3, r2
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	609a      	str	r2, [r3, #8]
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003498:	2302      	movs	r3, #2
 800349a:	e050      	b.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1c      	ldr	r2, [pc, #112]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d018      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	d013      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a18      	ldr	r2, [pc, #96]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00e      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a16      	ldr	r2, [pc, #88]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d009      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a15      	ldr	r2, [pc, #84]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d004      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a13      	ldr	r2, [pc, #76]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10c      	bne.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	4313      	orrs	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40014000 	.word	0x40014000

08003560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e03f      	b.n	800361a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd fc5e 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f829 	bl	8003624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003666:	f023 030c 	bic.w	r3, r3, #12
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	68f9      	ldr	r1, [r7, #12]
 8003670:	430b      	orrs	r3, r1
 8003672:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003692:	f040 818b 	bne.w	80039ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4ac1      	ldr	r2, [pc, #772]	; (80039a0 <UART_SetConfig+0x37c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d005      	beq.n	80036ac <UART_SetConfig+0x88>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4abf      	ldr	r2, [pc, #764]	; (80039a4 <UART_SetConfig+0x380>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	f040 80bd 	bne.w	8003826 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036ac:	f7ff fb86 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
 80036b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	461d      	mov	r5, r3
 80036b6:	f04f 0600 	mov.w	r6, #0
 80036ba:	46a8      	mov	r8, r5
 80036bc:	46b1      	mov	r9, r6
 80036be:	eb18 0308 	adds.w	r3, r8, r8
 80036c2:	eb49 0409 	adc.w	r4, r9, r9
 80036c6:	4698      	mov	r8, r3
 80036c8:	46a1      	mov	r9, r4
 80036ca:	eb18 0805 	adds.w	r8, r8, r5
 80036ce:	eb49 0906 	adc.w	r9, r9, r6
 80036d2:	f04f 0100 	mov.w	r1, #0
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036e6:	4688      	mov	r8, r1
 80036e8:	4691      	mov	r9, r2
 80036ea:	eb18 0005 	adds.w	r0, r8, r5
 80036ee:	eb49 0106 	adc.w	r1, r9, r6
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	461d      	mov	r5, r3
 80036f8:	f04f 0600 	mov.w	r6, #0
 80036fc:	196b      	adds	r3, r5, r5
 80036fe:	eb46 0406 	adc.w	r4, r6, r6
 8003702:	461a      	mov	r2, r3
 8003704:	4623      	mov	r3, r4
 8003706:	f7fc fdbb 	bl	8000280 <__aeabi_uldivmod>
 800370a:	4603      	mov	r3, r0
 800370c:	460c      	mov	r4, r1
 800370e:	461a      	mov	r2, r3
 8003710:	4ba5      	ldr	r3, [pc, #660]	; (80039a8 <UART_SetConfig+0x384>)
 8003712:	fba3 2302 	umull	r2, r3, r3, r2
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	461d      	mov	r5, r3
 8003720:	f04f 0600 	mov.w	r6, #0
 8003724:	46a9      	mov	r9, r5
 8003726:	46b2      	mov	sl, r6
 8003728:	eb19 0309 	adds.w	r3, r9, r9
 800372c:	eb4a 040a 	adc.w	r4, sl, sl
 8003730:	4699      	mov	r9, r3
 8003732:	46a2      	mov	sl, r4
 8003734:	eb19 0905 	adds.w	r9, r9, r5
 8003738:	eb4a 0a06 	adc.w	sl, sl, r6
 800373c:	f04f 0100 	mov.w	r1, #0
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003748:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800374c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003750:	4689      	mov	r9, r1
 8003752:	4692      	mov	sl, r2
 8003754:	eb19 0005 	adds.w	r0, r9, r5
 8003758:	eb4a 0106 	adc.w	r1, sl, r6
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	461d      	mov	r5, r3
 8003762:	f04f 0600 	mov.w	r6, #0
 8003766:	196b      	adds	r3, r5, r5
 8003768:	eb46 0406 	adc.w	r4, r6, r6
 800376c:	461a      	mov	r2, r3
 800376e:	4623      	mov	r3, r4
 8003770:	f7fc fd86 	bl	8000280 <__aeabi_uldivmod>
 8003774:	4603      	mov	r3, r0
 8003776:	460c      	mov	r4, r1
 8003778:	461a      	mov	r2, r3
 800377a:	4b8b      	ldr	r3, [pc, #556]	; (80039a8 <UART_SetConfig+0x384>)
 800377c:	fba3 1302 	umull	r1, r3, r3, r2
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	2164      	movs	r1, #100	; 0x64
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	3332      	adds	r3, #50	; 0x32
 800378e:	4a86      	ldr	r2, [pc, #536]	; (80039a8 <UART_SetConfig+0x384>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800379c:	4498      	add	r8, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	461d      	mov	r5, r3
 80037a2:	f04f 0600 	mov.w	r6, #0
 80037a6:	46a9      	mov	r9, r5
 80037a8:	46b2      	mov	sl, r6
 80037aa:	eb19 0309 	adds.w	r3, r9, r9
 80037ae:	eb4a 040a 	adc.w	r4, sl, sl
 80037b2:	4699      	mov	r9, r3
 80037b4:	46a2      	mov	sl, r4
 80037b6:	eb19 0905 	adds.w	r9, r9, r5
 80037ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80037be:	f04f 0100 	mov.w	r1, #0
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037d2:	4689      	mov	r9, r1
 80037d4:	4692      	mov	sl, r2
 80037d6:	eb19 0005 	adds.w	r0, r9, r5
 80037da:	eb4a 0106 	adc.w	r1, sl, r6
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	461d      	mov	r5, r3
 80037e4:	f04f 0600 	mov.w	r6, #0
 80037e8:	196b      	adds	r3, r5, r5
 80037ea:	eb46 0406 	adc.w	r4, r6, r6
 80037ee:	461a      	mov	r2, r3
 80037f0:	4623      	mov	r3, r4
 80037f2:	f7fc fd45 	bl	8000280 <__aeabi_uldivmod>
 80037f6:	4603      	mov	r3, r0
 80037f8:	460c      	mov	r4, r1
 80037fa:	461a      	mov	r2, r3
 80037fc:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <UART_SetConfig+0x384>)
 80037fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	2164      	movs	r1, #100	; 0x64
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	3332      	adds	r3, #50	; 0x32
 8003810:	4a65      	ldr	r2, [pc, #404]	; (80039a8 <UART_SetConfig+0x384>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	f003 0207 	and.w	r2, r3, #7
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4442      	add	r2, r8
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	e26f      	b.n	8003d06 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003826:	f7ff fab5 	bl	8002d94 <HAL_RCC_GetPCLK1Freq>
 800382a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	461d      	mov	r5, r3
 8003830:	f04f 0600 	mov.w	r6, #0
 8003834:	46a8      	mov	r8, r5
 8003836:	46b1      	mov	r9, r6
 8003838:	eb18 0308 	adds.w	r3, r8, r8
 800383c:	eb49 0409 	adc.w	r4, r9, r9
 8003840:	4698      	mov	r8, r3
 8003842:	46a1      	mov	r9, r4
 8003844:	eb18 0805 	adds.w	r8, r8, r5
 8003848:	eb49 0906 	adc.w	r9, r9, r6
 800384c:	f04f 0100 	mov.w	r1, #0
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003858:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800385c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003860:	4688      	mov	r8, r1
 8003862:	4691      	mov	r9, r2
 8003864:	eb18 0005 	adds.w	r0, r8, r5
 8003868:	eb49 0106 	adc.w	r1, r9, r6
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	461d      	mov	r5, r3
 8003872:	f04f 0600 	mov.w	r6, #0
 8003876:	196b      	adds	r3, r5, r5
 8003878:	eb46 0406 	adc.w	r4, r6, r6
 800387c:	461a      	mov	r2, r3
 800387e:	4623      	mov	r3, r4
 8003880:	f7fc fcfe 	bl	8000280 <__aeabi_uldivmod>
 8003884:	4603      	mov	r3, r0
 8003886:	460c      	mov	r4, r1
 8003888:	461a      	mov	r2, r3
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <UART_SetConfig+0x384>)
 800388c:	fba3 2302 	umull	r2, r3, r3, r2
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	461d      	mov	r5, r3
 800389a:	f04f 0600 	mov.w	r6, #0
 800389e:	46a9      	mov	r9, r5
 80038a0:	46b2      	mov	sl, r6
 80038a2:	eb19 0309 	adds.w	r3, r9, r9
 80038a6:	eb4a 040a 	adc.w	r4, sl, sl
 80038aa:	4699      	mov	r9, r3
 80038ac:	46a2      	mov	sl, r4
 80038ae:	eb19 0905 	adds.w	r9, r9, r5
 80038b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80038b6:	f04f 0100 	mov.w	r1, #0
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038ca:	4689      	mov	r9, r1
 80038cc:	4692      	mov	sl, r2
 80038ce:	eb19 0005 	adds.w	r0, r9, r5
 80038d2:	eb4a 0106 	adc.w	r1, sl, r6
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	461d      	mov	r5, r3
 80038dc:	f04f 0600 	mov.w	r6, #0
 80038e0:	196b      	adds	r3, r5, r5
 80038e2:	eb46 0406 	adc.w	r4, r6, r6
 80038e6:	461a      	mov	r2, r3
 80038e8:	4623      	mov	r3, r4
 80038ea:	f7fc fcc9 	bl	8000280 <__aeabi_uldivmod>
 80038ee:	4603      	mov	r3, r0
 80038f0:	460c      	mov	r4, r1
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b2c      	ldr	r3, [pc, #176]	; (80039a8 <UART_SetConfig+0x384>)
 80038f6:	fba3 1302 	umull	r1, r3, r3, r2
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2164      	movs	r1, #100	; 0x64
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	3332      	adds	r3, #50	; 0x32
 8003908:	4a27      	ldr	r2, [pc, #156]	; (80039a8 <UART_SetConfig+0x384>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003916:	4498      	add	r8, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	461d      	mov	r5, r3
 800391c:	f04f 0600 	mov.w	r6, #0
 8003920:	46a9      	mov	r9, r5
 8003922:	46b2      	mov	sl, r6
 8003924:	eb19 0309 	adds.w	r3, r9, r9
 8003928:	eb4a 040a 	adc.w	r4, sl, sl
 800392c:	4699      	mov	r9, r3
 800392e:	46a2      	mov	sl, r4
 8003930:	eb19 0905 	adds.w	r9, r9, r5
 8003934:	eb4a 0a06 	adc.w	sl, sl, r6
 8003938:	f04f 0100 	mov.w	r1, #0
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003944:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003948:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800394c:	4689      	mov	r9, r1
 800394e:	4692      	mov	sl, r2
 8003950:	eb19 0005 	adds.w	r0, r9, r5
 8003954:	eb4a 0106 	adc.w	r1, sl, r6
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	461d      	mov	r5, r3
 800395e:	f04f 0600 	mov.w	r6, #0
 8003962:	196b      	adds	r3, r5, r5
 8003964:	eb46 0406 	adc.w	r4, r6, r6
 8003968:	461a      	mov	r2, r3
 800396a:	4623      	mov	r3, r4
 800396c:	f7fc fc88 	bl	8000280 <__aeabi_uldivmod>
 8003970:	4603      	mov	r3, r0
 8003972:	460c      	mov	r4, r1
 8003974:	461a      	mov	r2, r3
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <UART_SetConfig+0x384>)
 8003978:	fba3 1302 	umull	r1, r3, r3, r2
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	2164      	movs	r1, #100	; 0x64
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	3332      	adds	r3, #50	; 0x32
 800398a:	4a07      	ldr	r2, [pc, #28]	; (80039a8 <UART_SetConfig+0x384>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	f003 0207 	and.w	r2, r3, #7
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4442      	add	r2, r8
 800399c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800399e:	e1b2      	b.n	8003d06 <UART_SetConfig+0x6e2>
 80039a0:	40011000 	.word	0x40011000
 80039a4:	40011400 	.word	0x40011400
 80039a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4ad7      	ldr	r2, [pc, #860]	; (8003d10 <UART_SetConfig+0x6ec>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d005      	beq.n	80039c2 <UART_SetConfig+0x39e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4ad6      	ldr	r2, [pc, #856]	; (8003d14 <UART_SetConfig+0x6f0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	f040 80d1 	bne.w	8003b64 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80039c2:	f7ff f9fb 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
 80039c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	469a      	mov	sl, r3
 80039cc:	f04f 0b00 	mov.w	fp, #0
 80039d0:	46d0      	mov	r8, sl
 80039d2:	46d9      	mov	r9, fp
 80039d4:	eb18 0308 	adds.w	r3, r8, r8
 80039d8:	eb49 0409 	adc.w	r4, r9, r9
 80039dc:	4698      	mov	r8, r3
 80039de:	46a1      	mov	r9, r4
 80039e0:	eb18 080a 	adds.w	r8, r8, sl
 80039e4:	eb49 090b 	adc.w	r9, r9, fp
 80039e8:	f04f 0100 	mov.w	r1, #0
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039fc:	4688      	mov	r8, r1
 80039fe:	4691      	mov	r9, r2
 8003a00:	eb1a 0508 	adds.w	r5, sl, r8
 8003a04:	eb4b 0609 	adc.w	r6, fp, r9
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	f04f 0400 	mov.w	r4, #0
 8003a1a:	0094      	lsls	r4, r2, #2
 8003a1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a20:	008b      	lsls	r3, r1, #2
 8003a22:	461a      	mov	r2, r3
 8003a24:	4623      	mov	r3, r4
 8003a26:	4628      	mov	r0, r5
 8003a28:	4631      	mov	r1, r6
 8003a2a:	f7fc fc29 	bl	8000280 <__aeabi_uldivmod>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	460c      	mov	r4, r1
 8003a32:	461a      	mov	r2, r3
 8003a34:	4bb8      	ldr	r3, [pc, #736]	; (8003d18 <UART_SetConfig+0x6f4>)
 8003a36:	fba3 2302 	umull	r2, r3, r3, r2
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	469b      	mov	fp, r3
 8003a44:	f04f 0c00 	mov.w	ip, #0
 8003a48:	46d9      	mov	r9, fp
 8003a4a:	46e2      	mov	sl, ip
 8003a4c:	eb19 0309 	adds.w	r3, r9, r9
 8003a50:	eb4a 040a 	adc.w	r4, sl, sl
 8003a54:	4699      	mov	r9, r3
 8003a56:	46a2      	mov	sl, r4
 8003a58:	eb19 090b 	adds.w	r9, r9, fp
 8003a5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a60:	f04f 0100 	mov.w	r1, #0
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a74:	4689      	mov	r9, r1
 8003a76:	4692      	mov	sl, r2
 8003a78:	eb1b 0509 	adds.w	r5, fp, r9
 8003a7c:	eb4c 060a 	adc.w	r6, ip, sl
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4619      	mov	r1, r3
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	f04f 0400 	mov.w	r4, #0
 8003a92:	0094      	lsls	r4, r2, #2
 8003a94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a98:	008b      	lsls	r3, r1, #2
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4623      	mov	r3, r4
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	4631      	mov	r1, r6
 8003aa2:	f7fc fbed 	bl	8000280 <__aeabi_uldivmod>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4b9a      	ldr	r3, [pc, #616]	; (8003d18 <UART_SetConfig+0x6f4>)
 8003aae:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	2164      	movs	r1, #100	; 0x64
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	3332      	adds	r3, #50	; 0x32
 8003ac0:	4a95      	ldr	r2, [pc, #596]	; (8003d18 <UART_SetConfig+0x6f4>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003acc:	4498      	add	r8, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	469b      	mov	fp, r3
 8003ad2:	f04f 0c00 	mov.w	ip, #0
 8003ad6:	46d9      	mov	r9, fp
 8003ad8:	46e2      	mov	sl, ip
 8003ada:	eb19 0309 	adds.w	r3, r9, r9
 8003ade:	eb4a 040a 	adc.w	r4, sl, sl
 8003ae2:	4699      	mov	r9, r3
 8003ae4:	46a2      	mov	sl, r4
 8003ae6:	eb19 090b 	adds.w	r9, r9, fp
 8003aea:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003afa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003afe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b02:	4689      	mov	r9, r1
 8003b04:	4692      	mov	sl, r2
 8003b06:	eb1b 0509 	adds.w	r5, fp, r9
 8003b0a:	eb4c 060a 	adc.w	r6, ip, sl
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4619      	mov	r1, r3
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	f04f 0400 	mov.w	r4, #0
 8003b20:	0094      	lsls	r4, r2, #2
 8003b22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b26:	008b      	lsls	r3, r1, #2
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	4631      	mov	r1, r6
 8003b30:	f7fc fba6 	bl	8000280 <__aeabi_uldivmod>
 8003b34:	4603      	mov	r3, r0
 8003b36:	460c      	mov	r4, r1
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b77      	ldr	r3, [pc, #476]	; (8003d18 <UART_SetConfig+0x6f4>)
 8003b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	2164      	movs	r1, #100	; 0x64
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	3332      	adds	r3, #50	; 0x32
 8003b4e:	4a72      	ldr	r2, [pc, #456]	; (8003d18 <UART_SetConfig+0x6f4>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	f003 020f 	and.w	r2, r3, #15
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4442      	add	r2, r8
 8003b60:	609a      	str	r2, [r3, #8]
 8003b62:	e0d0      	b.n	8003d06 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b64:	f7ff f916 	bl	8002d94 <HAL_RCC_GetPCLK1Freq>
 8003b68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	469a      	mov	sl, r3
 8003b6e:	f04f 0b00 	mov.w	fp, #0
 8003b72:	46d0      	mov	r8, sl
 8003b74:	46d9      	mov	r9, fp
 8003b76:	eb18 0308 	adds.w	r3, r8, r8
 8003b7a:	eb49 0409 	adc.w	r4, r9, r9
 8003b7e:	4698      	mov	r8, r3
 8003b80:	46a1      	mov	r9, r4
 8003b82:	eb18 080a 	adds.w	r8, r8, sl
 8003b86:	eb49 090b 	adc.w	r9, r9, fp
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b9e:	4688      	mov	r8, r1
 8003ba0:	4691      	mov	r9, r2
 8003ba2:	eb1a 0508 	adds.w	r5, sl, r8
 8003ba6:	eb4b 0609 	adc.w	r6, fp, r9
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	f04f 0400 	mov.w	r4, #0
 8003bbc:	0094      	lsls	r4, r2, #2
 8003bbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bc2:	008b      	lsls	r3, r1, #2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4623      	mov	r3, r4
 8003bc8:	4628      	mov	r0, r5
 8003bca:	4631      	mov	r1, r6
 8003bcc:	f7fc fb58 	bl	8000280 <__aeabi_uldivmod>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <UART_SetConfig+0x6f4>)
 8003bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	469b      	mov	fp, r3
 8003be6:	f04f 0c00 	mov.w	ip, #0
 8003bea:	46d9      	mov	r9, fp
 8003bec:	46e2      	mov	sl, ip
 8003bee:	eb19 0309 	adds.w	r3, r9, r9
 8003bf2:	eb4a 040a 	adc.w	r4, sl, sl
 8003bf6:	4699      	mov	r9, r3
 8003bf8:	46a2      	mov	sl, r4
 8003bfa:	eb19 090b 	adds.w	r9, r9, fp
 8003bfe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c16:	4689      	mov	r9, r1
 8003c18:	4692      	mov	sl, r2
 8003c1a:	eb1b 0509 	adds.w	r5, fp, r9
 8003c1e:	eb4c 060a 	adc.w	r6, ip, sl
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4619      	mov	r1, r3
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	f04f 0400 	mov.w	r4, #0
 8003c34:	0094      	lsls	r4, r2, #2
 8003c36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c3a:	008b      	lsls	r3, r1, #2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4623      	mov	r3, r4
 8003c40:	4628      	mov	r0, r5
 8003c42:	4631      	mov	r1, r6
 8003c44:	f7fc fb1c 	bl	8000280 <__aeabi_uldivmod>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	460c      	mov	r4, r1
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <UART_SetConfig+0x6f4>)
 8003c50:	fba3 1302 	umull	r1, r3, r3, r2
 8003c54:	095b      	lsrs	r3, r3, #5
 8003c56:	2164      	movs	r1, #100	; 0x64
 8003c58:	fb01 f303 	mul.w	r3, r1, r3
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	3332      	adds	r3, #50	; 0x32
 8003c62:	4a2d      	ldr	r2, [pc, #180]	; (8003d18 <UART_SetConfig+0x6f4>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c6e:	4498      	add	r8, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	469b      	mov	fp, r3
 8003c74:	f04f 0c00 	mov.w	ip, #0
 8003c78:	46d9      	mov	r9, fp
 8003c7a:	46e2      	mov	sl, ip
 8003c7c:	eb19 0309 	adds.w	r3, r9, r9
 8003c80:	eb4a 040a 	adc.w	r4, sl, sl
 8003c84:	4699      	mov	r9, r3
 8003c86:	46a2      	mov	sl, r4
 8003c88:	eb19 090b 	adds.w	r9, r9, fp
 8003c8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c90:	f04f 0100 	mov.w	r1, #0
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ca0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ca4:	4689      	mov	r9, r1
 8003ca6:	4692      	mov	sl, r2
 8003ca8:	eb1b 0509 	adds.w	r5, fp, r9
 8003cac:	eb4c 060a 	adc.w	r6, ip, sl
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	f04f 0400 	mov.w	r4, #0
 8003cc2:	0094      	lsls	r4, r2, #2
 8003cc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cc8:	008b      	lsls	r3, r1, #2
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4623      	mov	r3, r4
 8003cce:	4628      	mov	r0, r5
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	f7fc fad5 	bl	8000280 <__aeabi_uldivmod>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	460c      	mov	r4, r1
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <UART_SetConfig+0x6f4>)
 8003cde:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2164      	movs	r1, #100	; 0x64
 8003ce6:	fb01 f303 	mul.w	r3, r1, r3
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	3332      	adds	r3, #50	; 0x32
 8003cf0:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <UART_SetConfig+0x6f4>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	f003 020f 	and.w	r2, r3, #15
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4442      	add	r2, r8
 8003d02:	609a      	str	r2, [r3, #8]
}
 8003d04:	e7ff      	b.n	8003d06 <UART_SetConfig+0x6e2>
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d10:	40011000 	.word	0x40011000
 8003d14:	40011400 	.word	0x40011400
 8003d18:	51eb851f 	.word	0x51eb851f

08003d1c <__errno>:
 8003d1c:	4b01      	ldr	r3, [pc, #4]	; (8003d24 <__errno+0x8>)
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	2000000c 	.word	0x2000000c

08003d28 <__libc_init_array>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	4e0d      	ldr	r6, [pc, #52]	; (8003d60 <__libc_init_array+0x38>)
 8003d2c:	4c0d      	ldr	r4, [pc, #52]	; (8003d64 <__libc_init_array+0x3c>)
 8003d2e:	1ba4      	subs	r4, r4, r6
 8003d30:	10a4      	asrs	r4, r4, #2
 8003d32:	2500      	movs	r5, #0
 8003d34:	42a5      	cmp	r5, r4
 8003d36:	d109      	bne.n	8003d4c <__libc_init_array+0x24>
 8003d38:	4e0b      	ldr	r6, [pc, #44]	; (8003d68 <__libc_init_array+0x40>)
 8003d3a:	4c0c      	ldr	r4, [pc, #48]	; (8003d6c <__libc_init_array+0x44>)
 8003d3c:	f000 ffd4 	bl	8004ce8 <_init>
 8003d40:	1ba4      	subs	r4, r4, r6
 8003d42:	10a4      	asrs	r4, r4, #2
 8003d44:	2500      	movs	r5, #0
 8003d46:	42a5      	cmp	r5, r4
 8003d48:	d105      	bne.n	8003d56 <__libc_init_array+0x2e>
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
 8003d4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d50:	4798      	blx	r3
 8003d52:	3501      	adds	r5, #1
 8003d54:	e7ee      	b.n	8003d34 <__libc_init_array+0xc>
 8003d56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d5a:	4798      	blx	r3
 8003d5c:	3501      	adds	r5, #1
 8003d5e:	e7f2      	b.n	8003d46 <__libc_init_array+0x1e>
 8003d60:	08004e40 	.word	0x08004e40
 8003d64:	08004e40 	.word	0x08004e40
 8003d68:	08004e40 	.word	0x08004e40
 8003d6c:	08004e44 	.word	0x08004e44

08003d70 <memset>:
 8003d70:	4402      	add	r2, r0
 8003d72:	4603      	mov	r3, r0
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d100      	bne.n	8003d7a <memset+0xa>
 8003d78:	4770      	bx	lr
 8003d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d7e:	e7f9      	b.n	8003d74 <memset+0x4>

08003d80 <_puts_r>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	460e      	mov	r6, r1
 8003d84:	4605      	mov	r5, r0
 8003d86:	b118      	cbz	r0, 8003d90 <_puts_r+0x10>
 8003d88:	6983      	ldr	r3, [r0, #24]
 8003d8a:	b90b      	cbnz	r3, 8003d90 <_puts_r+0x10>
 8003d8c:	f000 fa2c 	bl	80041e8 <__sinit>
 8003d90:	69ab      	ldr	r3, [r5, #24]
 8003d92:	68ac      	ldr	r4, [r5, #8]
 8003d94:	b913      	cbnz	r3, 8003d9c <_puts_r+0x1c>
 8003d96:	4628      	mov	r0, r5
 8003d98:	f000 fa26 	bl	80041e8 <__sinit>
 8003d9c:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <_puts_r+0xac>)
 8003d9e:	429c      	cmp	r4, r3
 8003da0:	d117      	bne.n	8003dd2 <_puts_r+0x52>
 8003da2:	686c      	ldr	r4, [r5, #4]
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	071b      	lsls	r3, r3, #28
 8003da8:	d51d      	bpl.n	8003de6 <_puts_r+0x66>
 8003daa:	6923      	ldr	r3, [r4, #16]
 8003dac:	b1db      	cbz	r3, 8003de6 <_puts_r+0x66>
 8003dae:	3e01      	subs	r6, #1
 8003db0:	68a3      	ldr	r3, [r4, #8]
 8003db2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003db6:	3b01      	subs	r3, #1
 8003db8:	60a3      	str	r3, [r4, #8]
 8003dba:	b9e9      	cbnz	r1, 8003df8 <_puts_r+0x78>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	da2e      	bge.n	8003e1e <_puts_r+0x9e>
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	210a      	movs	r1, #10
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	f000 f85f 	bl	8003e88 <__swbuf_r>
 8003dca:	3001      	adds	r0, #1
 8003dcc:	d011      	beq.n	8003df2 <_puts_r+0x72>
 8003dce:	200a      	movs	r0, #10
 8003dd0:	e011      	b.n	8003df6 <_puts_r+0x76>
 8003dd2:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <_puts_r+0xb0>)
 8003dd4:	429c      	cmp	r4, r3
 8003dd6:	d101      	bne.n	8003ddc <_puts_r+0x5c>
 8003dd8:	68ac      	ldr	r4, [r5, #8]
 8003dda:	e7e3      	b.n	8003da4 <_puts_r+0x24>
 8003ddc:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <_puts_r+0xb4>)
 8003dde:	429c      	cmp	r4, r3
 8003de0:	bf08      	it	eq
 8003de2:	68ec      	ldreq	r4, [r5, #12]
 8003de4:	e7de      	b.n	8003da4 <_puts_r+0x24>
 8003de6:	4621      	mov	r1, r4
 8003de8:	4628      	mov	r0, r5
 8003dea:	f000 f89f 	bl	8003f2c <__swsetup_r>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d0dd      	beq.n	8003dae <_puts_r+0x2e>
 8003df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003df6:	bd70      	pop	{r4, r5, r6, pc}
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	da04      	bge.n	8003e06 <_puts_r+0x86>
 8003dfc:	69a2      	ldr	r2, [r4, #24]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	dc06      	bgt.n	8003e10 <_puts_r+0x90>
 8003e02:	290a      	cmp	r1, #10
 8003e04:	d004      	beq.n	8003e10 <_puts_r+0x90>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	6022      	str	r2, [r4, #0]
 8003e0c:	7019      	strb	r1, [r3, #0]
 8003e0e:	e7cf      	b.n	8003db0 <_puts_r+0x30>
 8003e10:	4622      	mov	r2, r4
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 f838 	bl	8003e88 <__swbuf_r>
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d1c9      	bne.n	8003db0 <_puts_r+0x30>
 8003e1c:	e7e9      	b.n	8003df2 <_puts_r+0x72>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	200a      	movs	r0, #10
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	6022      	str	r2, [r4, #0]
 8003e26:	7018      	strb	r0, [r3, #0]
 8003e28:	e7e5      	b.n	8003df6 <_puts_r+0x76>
 8003e2a:	bf00      	nop
 8003e2c:	08004dc4 	.word	0x08004dc4
 8003e30:	08004de4 	.word	0x08004de4
 8003e34:	08004da4 	.word	0x08004da4

08003e38 <puts>:
 8003e38:	4b02      	ldr	r3, [pc, #8]	; (8003e44 <puts+0xc>)
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	f7ff bf9f 	b.w	8003d80 <_puts_r>
 8003e42:	bf00      	nop
 8003e44:	2000000c 	.word	0x2000000c

08003e48 <siprintf>:
 8003e48:	b40e      	push	{r1, r2, r3}
 8003e4a:	b500      	push	{lr}
 8003e4c:	b09c      	sub	sp, #112	; 0x70
 8003e4e:	ab1d      	add	r3, sp, #116	; 0x74
 8003e50:	9002      	str	r0, [sp, #8]
 8003e52:	9006      	str	r0, [sp, #24]
 8003e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e58:	4809      	ldr	r0, [pc, #36]	; (8003e80 <siprintf+0x38>)
 8003e5a:	9107      	str	r1, [sp, #28]
 8003e5c:	9104      	str	r1, [sp, #16]
 8003e5e:	4909      	ldr	r1, [pc, #36]	; (8003e84 <siprintf+0x3c>)
 8003e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e64:	9105      	str	r1, [sp, #20]
 8003e66:	6800      	ldr	r0, [r0, #0]
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	a902      	add	r1, sp, #8
 8003e6c:	f000 fbac 	bl	80045c8 <_svfiprintf_r>
 8003e70:	9b02      	ldr	r3, [sp, #8]
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	b01c      	add	sp, #112	; 0x70
 8003e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e7c:	b003      	add	sp, #12
 8003e7e:	4770      	bx	lr
 8003e80:	2000000c 	.word	0x2000000c
 8003e84:	ffff0208 	.word	0xffff0208

08003e88 <__swbuf_r>:
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	460e      	mov	r6, r1
 8003e8c:	4614      	mov	r4, r2
 8003e8e:	4605      	mov	r5, r0
 8003e90:	b118      	cbz	r0, 8003e9a <__swbuf_r+0x12>
 8003e92:	6983      	ldr	r3, [r0, #24]
 8003e94:	b90b      	cbnz	r3, 8003e9a <__swbuf_r+0x12>
 8003e96:	f000 f9a7 	bl	80041e8 <__sinit>
 8003e9a:	4b21      	ldr	r3, [pc, #132]	; (8003f20 <__swbuf_r+0x98>)
 8003e9c:	429c      	cmp	r4, r3
 8003e9e:	d12a      	bne.n	8003ef6 <__swbuf_r+0x6e>
 8003ea0:	686c      	ldr	r4, [r5, #4]
 8003ea2:	69a3      	ldr	r3, [r4, #24]
 8003ea4:	60a3      	str	r3, [r4, #8]
 8003ea6:	89a3      	ldrh	r3, [r4, #12]
 8003ea8:	071a      	lsls	r2, r3, #28
 8003eaa:	d52e      	bpl.n	8003f0a <__swbuf_r+0x82>
 8003eac:	6923      	ldr	r3, [r4, #16]
 8003eae:	b363      	cbz	r3, 8003f0a <__swbuf_r+0x82>
 8003eb0:	6923      	ldr	r3, [r4, #16]
 8003eb2:	6820      	ldr	r0, [r4, #0]
 8003eb4:	1ac0      	subs	r0, r0, r3
 8003eb6:	6963      	ldr	r3, [r4, #20]
 8003eb8:	b2f6      	uxtb	r6, r6
 8003eba:	4283      	cmp	r3, r0
 8003ebc:	4637      	mov	r7, r6
 8003ebe:	dc04      	bgt.n	8003eca <__swbuf_r+0x42>
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f000 f926 	bl	8004114 <_fflush_r>
 8003ec8:	bb28      	cbnz	r0, 8003f16 <__swbuf_r+0x8e>
 8003eca:	68a3      	ldr	r3, [r4, #8]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	60a3      	str	r3, [r4, #8]
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	6022      	str	r2, [r4, #0]
 8003ed6:	701e      	strb	r6, [r3, #0]
 8003ed8:	6963      	ldr	r3, [r4, #20]
 8003eda:	3001      	adds	r0, #1
 8003edc:	4283      	cmp	r3, r0
 8003ede:	d004      	beq.n	8003eea <__swbuf_r+0x62>
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	07db      	lsls	r3, r3, #31
 8003ee4:	d519      	bpl.n	8003f1a <__swbuf_r+0x92>
 8003ee6:	2e0a      	cmp	r6, #10
 8003ee8:	d117      	bne.n	8003f1a <__swbuf_r+0x92>
 8003eea:	4621      	mov	r1, r4
 8003eec:	4628      	mov	r0, r5
 8003eee:	f000 f911 	bl	8004114 <_fflush_r>
 8003ef2:	b190      	cbz	r0, 8003f1a <__swbuf_r+0x92>
 8003ef4:	e00f      	b.n	8003f16 <__swbuf_r+0x8e>
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <__swbuf_r+0x9c>)
 8003ef8:	429c      	cmp	r4, r3
 8003efa:	d101      	bne.n	8003f00 <__swbuf_r+0x78>
 8003efc:	68ac      	ldr	r4, [r5, #8]
 8003efe:	e7d0      	b.n	8003ea2 <__swbuf_r+0x1a>
 8003f00:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <__swbuf_r+0xa0>)
 8003f02:	429c      	cmp	r4, r3
 8003f04:	bf08      	it	eq
 8003f06:	68ec      	ldreq	r4, [r5, #12]
 8003f08:	e7cb      	b.n	8003ea2 <__swbuf_r+0x1a>
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f000 f80d 	bl	8003f2c <__swsetup_r>
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d0cc      	beq.n	8003eb0 <__swbuf_r+0x28>
 8003f16:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	08004dc4 	.word	0x08004dc4
 8003f24:	08004de4 	.word	0x08004de4
 8003f28:	08004da4 	.word	0x08004da4

08003f2c <__swsetup_r>:
 8003f2c:	4b32      	ldr	r3, [pc, #200]	; (8003ff8 <__swsetup_r+0xcc>)
 8003f2e:	b570      	push	{r4, r5, r6, lr}
 8003f30:	681d      	ldr	r5, [r3, #0]
 8003f32:	4606      	mov	r6, r0
 8003f34:	460c      	mov	r4, r1
 8003f36:	b125      	cbz	r5, 8003f42 <__swsetup_r+0x16>
 8003f38:	69ab      	ldr	r3, [r5, #24]
 8003f3a:	b913      	cbnz	r3, 8003f42 <__swsetup_r+0x16>
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	f000 f953 	bl	80041e8 <__sinit>
 8003f42:	4b2e      	ldr	r3, [pc, #184]	; (8003ffc <__swsetup_r+0xd0>)
 8003f44:	429c      	cmp	r4, r3
 8003f46:	d10f      	bne.n	8003f68 <__swsetup_r+0x3c>
 8003f48:	686c      	ldr	r4, [r5, #4]
 8003f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	0715      	lsls	r5, r2, #28
 8003f52:	d42c      	bmi.n	8003fae <__swsetup_r+0x82>
 8003f54:	06d0      	lsls	r0, r2, #27
 8003f56:	d411      	bmi.n	8003f7c <__swsetup_r+0x50>
 8003f58:	2209      	movs	r2, #9
 8003f5a:	6032      	str	r2, [r6, #0]
 8003f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f66:	e03e      	b.n	8003fe6 <__swsetup_r+0xba>
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <__swsetup_r+0xd4>)
 8003f6a:	429c      	cmp	r4, r3
 8003f6c:	d101      	bne.n	8003f72 <__swsetup_r+0x46>
 8003f6e:	68ac      	ldr	r4, [r5, #8]
 8003f70:	e7eb      	b.n	8003f4a <__swsetup_r+0x1e>
 8003f72:	4b24      	ldr	r3, [pc, #144]	; (8004004 <__swsetup_r+0xd8>)
 8003f74:	429c      	cmp	r4, r3
 8003f76:	bf08      	it	eq
 8003f78:	68ec      	ldreq	r4, [r5, #12]
 8003f7a:	e7e6      	b.n	8003f4a <__swsetup_r+0x1e>
 8003f7c:	0751      	lsls	r1, r2, #29
 8003f7e:	d512      	bpl.n	8003fa6 <__swsetup_r+0x7a>
 8003f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f82:	b141      	cbz	r1, 8003f96 <__swsetup_r+0x6a>
 8003f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f88:	4299      	cmp	r1, r3
 8003f8a:	d002      	beq.n	8003f92 <__swsetup_r+0x66>
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f000 fa19 	bl	80043c4 <_free_r>
 8003f92:	2300      	movs	r3, #0
 8003f94:	6363      	str	r3, [r4, #52]	; 0x34
 8003f96:	89a3      	ldrh	r3, [r4, #12]
 8003f98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f9c:	81a3      	strh	r3, [r4, #12]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	6063      	str	r3, [r4, #4]
 8003fa2:	6923      	ldr	r3, [r4, #16]
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	89a3      	ldrh	r3, [r4, #12]
 8003fa8:	f043 0308 	orr.w	r3, r3, #8
 8003fac:	81a3      	strh	r3, [r4, #12]
 8003fae:	6923      	ldr	r3, [r4, #16]
 8003fb0:	b94b      	cbnz	r3, 8003fc6 <__swsetup_r+0x9a>
 8003fb2:	89a3      	ldrh	r3, [r4, #12]
 8003fb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fbc:	d003      	beq.n	8003fc6 <__swsetup_r+0x9a>
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	f000 f9bf 	bl	8004344 <__smakebuf_r>
 8003fc6:	89a2      	ldrh	r2, [r4, #12]
 8003fc8:	f012 0301 	ands.w	r3, r2, #1
 8003fcc:	d00c      	beq.n	8003fe8 <__swsetup_r+0xbc>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60a3      	str	r3, [r4, #8]
 8003fd2:	6963      	ldr	r3, [r4, #20]
 8003fd4:	425b      	negs	r3, r3
 8003fd6:	61a3      	str	r3, [r4, #24]
 8003fd8:	6923      	ldr	r3, [r4, #16]
 8003fda:	b953      	cbnz	r3, 8003ff2 <__swsetup_r+0xc6>
 8003fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fe0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003fe4:	d1ba      	bne.n	8003f5c <__swsetup_r+0x30>
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
 8003fe8:	0792      	lsls	r2, r2, #30
 8003fea:	bf58      	it	pl
 8003fec:	6963      	ldrpl	r3, [r4, #20]
 8003fee:	60a3      	str	r3, [r4, #8]
 8003ff0:	e7f2      	b.n	8003fd8 <__swsetup_r+0xac>
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	e7f7      	b.n	8003fe6 <__swsetup_r+0xba>
 8003ff6:	bf00      	nop
 8003ff8:	2000000c 	.word	0x2000000c
 8003ffc:	08004dc4 	.word	0x08004dc4
 8004000:	08004de4 	.word	0x08004de4
 8004004:	08004da4 	.word	0x08004da4

08004008 <__sflush_r>:
 8004008:	898a      	ldrh	r2, [r1, #12]
 800400a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800400e:	4605      	mov	r5, r0
 8004010:	0710      	lsls	r0, r2, #28
 8004012:	460c      	mov	r4, r1
 8004014:	d458      	bmi.n	80040c8 <__sflush_r+0xc0>
 8004016:	684b      	ldr	r3, [r1, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	dc05      	bgt.n	8004028 <__sflush_r+0x20>
 800401c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	dc02      	bgt.n	8004028 <__sflush_r+0x20>
 8004022:	2000      	movs	r0, #0
 8004024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800402a:	2e00      	cmp	r6, #0
 800402c:	d0f9      	beq.n	8004022 <__sflush_r+0x1a>
 800402e:	2300      	movs	r3, #0
 8004030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004034:	682f      	ldr	r7, [r5, #0]
 8004036:	6a21      	ldr	r1, [r4, #32]
 8004038:	602b      	str	r3, [r5, #0]
 800403a:	d032      	beq.n	80040a2 <__sflush_r+0x9a>
 800403c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	075a      	lsls	r2, r3, #29
 8004042:	d505      	bpl.n	8004050 <__sflush_r+0x48>
 8004044:	6863      	ldr	r3, [r4, #4]
 8004046:	1ac0      	subs	r0, r0, r3
 8004048:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800404a:	b10b      	cbz	r3, 8004050 <__sflush_r+0x48>
 800404c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800404e:	1ac0      	subs	r0, r0, r3
 8004050:	2300      	movs	r3, #0
 8004052:	4602      	mov	r2, r0
 8004054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004056:	6a21      	ldr	r1, [r4, #32]
 8004058:	4628      	mov	r0, r5
 800405a:	47b0      	blx	r6
 800405c:	1c43      	adds	r3, r0, #1
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	d106      	bne.n	8004070 <__sflush_r+0x68>
 8004062:	6829      	ldr	r1, [r5, #0]
 8004064:	291d      	cmp	r1, #29
 8004066:	d848      	bhi.n	80040fa <__sflush_r+0xf2>
 8004068:	4a29      	ldr	r2, [pc, #164]	; (8004110 <__sflush_r+0x108>)
 800406a:	40ca      	lsrs	r2, r1
 800406c:	07d6      	lsls	r6, r2, #31
 800406e:	d544      	bpl.n	80040fa <__sflush_r+0xf2>
 8004070:	2200      	movs	r2, #0
 8004072:	6062      	str	r2, [r4, #4]
 8004074:	04d9      	lsls	r1, r3, #19
 8004076:	6922      	ldr	r2, [r4, #16]
 8004078:	6022      	str	r2, [r4, #0]
 800407a:	d504      	bpl.n	8004086 <__sflush_r+0x7e>
 800407c:	1c42      	adds	r2, r0, #1
 800407e:	d101      	bne.n	8004084 <__sflush_r+0x7c>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	b903      	cbnz	r3, 8004086 <__sflush_r+0x7e>
 8004084:	6560      	str	r0, [r4, #84]	; 0x54
 8004086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004088:	602f      	str	r7, [r5, #0]
 800408a:	2900      	cmp	r1, #0
 800408c:	d0c9      	beq.n	8004022 <__sflush_r+0x1a>
 800408e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004092:	4299      	cmp	r1, r3
 8004094:	d002      	beq.n	800409c <__sflush_r+0x94>
 8004096:	4628      	mov	r0, r5
 8004098:	f000 f994 	bl	80043c4 <_free_r>
 800409c:	2000      	movs	r0, #0
 800409e:	6360      	str	r0, [r4, #52]	; 0x34
 80040a0:	e7c0      	b.n	8004024 <__sflush_r+0x1c>
 80040a2:	2301      	movs	r3, #1
 80040a4:	4628      	mov	r0, r5
 80040a6:	47b0      	blx	r6
 80040a8:	1c41      	adds	r1, r0, #1
 80040aa:	d1c8      	bne.n	800403e <__sflush_r+0x36>
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0c5      	beq.n	800403e <__sflush_r+0x36>
 80040b2:	2b1d      	cmp	r3, #29
 80040b4:	d001      	beq.n	80040ba <__sflush_r+0xb2>
 80040b6:	2b16      	cmp	r3, #22
 80040b8:	d101      	bne.n	80040be <__sflush_r+0xb6>
 80040ba:	602f      	str	r7, [r5, #0]
 80040bc:	e7b1      	b.n	8004022 <__sflush_r+0x1a>
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c4:	81a3      	strh	r3, [r4, #12]
 80040c6:	e7ad      	b.n	8004024 <__sflush_r+0x1c>
 80040c8:	690f      	ldr	r7, [r1, #16]
 80040ca:	2f00      	cmp	r7, #0
 80040cc:	d0a9      	beq.n	8004022 <__sflush_r+0x1a>
 80040ce:	0793      	lsls	r3, r2, #30
 80040d0:	680e      	ldr	r6, [r1, #0]
 80040d2:	bf08      	it	eq
 80040d4:	694b      	ldreq	r3, [r1, #20]
 80040d6:	600f      	str	r7, [r1, #0]
 80040d8:	bf18      	it	ne
 80040da:	2300      	movne	r3, #0
 80040dc:	eba6 0807 	sub.w	r8, r6, r7
 80040e0:	608b      	str	r3, [r1, #8]
 80040e2:	f1b8 0f00 	cmp.w	r8, #0
 80040e6:	dd9c      	ble.n	8004022 <__sflush_r+0x1a>
 80040e8:	4643      	mov	r3, r8
 80040ea:	463a      	mov	r2, r7
 80040ec:	6a21      	ldr	r1, [r4, #32]
 80040ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040f0:	4628      	mov	r0, r5
 80040f2:	47b0      	blx	r6
 80040f4:	2800      	cmp	r0, #0
 80040f6:	dc06      	bgt.n	8004106 <__sflush_r+0xfe>
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004104:	e78e      	b.n	8004024 <__sflush_r+0x1c>
 8004106:	4407      	add	r7, r0
 8004108:	eba8 0800 	sub.w	r8, r8, r0
 800410c:	e7e9      	b.n	80040e2 <__sflush_r+0xda>
 800410e:	bf00      	nop
 8004110:	20400001 	.word	0x20400001

08004114 <_fflush_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	690b      	ldr	r3, [r1, #16]
 8004118:	4605      	mov	r5, r0
 800411a:	460c      	mov	r4, r1
 800411c:	b1db      	cbz	r3, 8004156 <_fflush_r+0x42>
 800411e:	b118      	cbz	r0, 8004128 <_fflush_r+0x14>
 8004120:	6983      	ldr	r3, [r0, #24]
 8004122:	b90b      	cbnz	r3, 8004128 <_fflush_r+0x14>
 8004124:	f000 f860 	bl	80041e8 <__sinit>
 8004128:	4b0c      	ldr	r3, [pc, #48]	; (800415c <_fflush_r+0x48>)
 800412a:	429c      	cmp	r4, r3
 800412c:	d109      	bne.n	8004142 <_fflush_r+0x2e>
 800412e:	686c      	ldr	r4, [r5, #4]
 8004130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004134:	b17b      	cbz	r3, 8004156 <_fflush_r+0x42>
 8004136:	4621      	mov	r1, r4
 8004138:	4628      	mov	r0, r5
 800413a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800413e:	f7ff bf63 	b.w	8004008 <__sflush_r>
 8004142:	4b07      	ldr	r3, [pc, #28]	; (8004160 <_fflush_r+0x4c>)
 8004144:	429c      	cmp	r4, r3
 8004146:	d101      	bne.n	800414c <_fflush_r+0x38>
 8004148:	68ac      	ldr	r4, [r5, #8]
 800414a:	e7f1      	b.n	8004130 <_fflush_r+0x1c>
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <_fflush_r+0x50>)
 800414e:	429c      	cmp	r4, r3
 8004150:	bf08      	it	eq
 8004152:	68ec      	ldreq	r4, [r5, #12]
 8004154:	e7ec      	b.n	8004130 <_fflush_r+0x1c>
 8004156:	2000      	movs	r0, #0
 8004158:	bd38      	pop	{r3, r4, r5, pc}
 800415a:	bf00      	nop
 800415c:	08004dc4 	.word	0x08004dc4
 8004160:	08004de4 	.word	0x08004de4
 8004164:	08004da4 	.word	0x08004da4

08004168 <std>:
 8004168:	2300      	movs	r3, #0
 800416a:	b510      	push	{r4, lr}
 800416c:	4604      	mov	r4, r0
 800416e:	e9c0 3300 	strd	r3, r3, [r0]
 8004172:	6083      	str	r3, [r0, #8]
 8004174:	8181      	strh	r1, [r0, #12]
 8004176:	6643      	str	r3, [r0, #100]	; 0x64
 8004178:	81c2      	strh	r2, [r0, #14]
 800417a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800417e:	6183      	str	r3, [r0, #24]
 8004180:	4619      	mov	r1, r3
 8004182:	2208      	movs	r2, #8
 8004184:	305c      	adds	r0, #92	; 0x5c
 8004186:	f7ff fdf3 	bl	8003d70 <memset>
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <std+0x38>)
 800418c:	6263      	str	r3, [r4, #36]	; 0x24
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <std+0x3c>)
 8004190:	62a3      	str	r3, [r4, #40]	; 0x28
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <std+0x40>)
 8004194:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <std+0x44>)
 8004198:	6224      	str	r4, [r4, #32]
 800419a:	6323      	str	r3, [r4, #48]	; 0x30
 800419c:	bd10      	pop	{r4, pc}
 800419e:	bf00      	nop
 80041a0:	08004ae9 	.word	0x08004ae9
 80041a4:	08004b0b 	.word	0x08004b0b
 80041a8:	08004b43 	.word	0x08004b43
 80041ac:	08004b67 	.word	0x08004b67

080041b0 <_cleanup_r>:
 80041b0:	4901      	ldr	r1, [pc, #4]	; (80041b8 <_cleanup_r+0x8>)
 80041b2:	f000 b885 	b.w	80042c0 <_fwalk_reent>
 80041b6:	bf00      	nop
 80041b8:	08004115 	.word	0x08004115

080041bc <__sfmoreglue>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	1e4a      	subs	r2, r1, #1
 80041c0:	2568      	movs	r5, #104	; 0x68
 80041c2:	4355      	muls	r5, r2
 80041c4:	460e      	mov	r6, r1
 80041c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041ca:	f000 f949 	bl	8004460 <_malloc_r>
 80041ce:	4604      	mov	r4, r0
 80041d0:	b140      	cbz	r0, 80041e4 <__sfmoreglue+0x28>
 80041d2:	2100      	movs	r1, #0
 80041d4:	e9c0 1600 	strd	r1, r6, [r0]
 80041d8:	300c      	adds	r0, #12
 80041da:	60a0      	str	r0, [r4, #8]
 80041dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041e0:	f7ff fdc6 	bl	8003d70 <memset>
 80041e4:	4620      	mov	r0, r4
 80041e6:	bd70      	pop	{r4, r5, r6, pc}

080041e8 <__sinit>:
 80041e8:	6983      	ldr	r3, [r0, #24]
 80041ea:	b510      	push	{r4, lr}
 80041ec:	4604      	mov	r4, r0
 80041ee:	bb33      	cbnz	r3, 800423e <__sinit+0x56>
 80041f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80041f4:	6503      	str	r3, [r0, #80]	; 0x50
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <__sinit+0x58>)
 80041f8:	4a12      	ldr	r2, [pc, #72]	; (8004244 <__sinit+0x5c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6282      	str	r2, [r0, #40]	; 0x28
 80041fe:	4298      	cmp	r0, r3
 8004200:	bf04      	itt	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	6183      	streq	r3, [r0, #24]
 8004206:	f000 f81f 	bl	8004248 <__sfp>
 800420a:	6060      	str	r0, [r4, #4]
 800420c:	4620      	mov	r0, r4
 800420e:	f000 f81b 	bl	8004248 <__sfp>
 8004212:	60a0      	str	r0, [r4, #8]
 8004214:	4620      	mov	r0, r4
 8004216:	f000 f817 	bl	8004248 <__sfp>
 800421a:	2200      	movs	r2, #0
 800421c:	60e0      	str	r0, [r4, #12]
 800421e:	2104      	movs	r1, #4
 8004220:	6860      	ldr	r0, [r4, #4]
 8004222:	f7ff ffa1 	bl	8004168 <std>
 8004226:	2201      	movs	r2, #1
 8004228:	2109      	movs	r1, #9
 800422a:	68a0      	ldr	r0, [r4, #8]
 800422c:	f7ff ff9c 	bl	8004168 <std>
 8004230:	2202      	movs	r2, #2
 8004232:	2112      	movs	r1, #18
 8004234:	68e0      	ldr	r0, [r4, #12]
 8004236:	f7ff ff97 	bl	8004168 <std>
 800423a:	2301      	movs	r3, #1
 800423c:	61a3      	str	r3, [r4, #24]
 800423e:	bd10      	pop	{r4, pc}
 8004240:	08004da0 	.word	0x08004da0
 8004244:	080041b1 	.word	0x080041b1

08004248 <__sfp>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <__sfp+0x70>)
 800424c:	681e      	ldr	r6, [r3, #0]
 800424e:	69b3      	ldr	r3, [r6, #24]
 8004250:	4607      	mov	r7, r0
 8004252:	b913      	cbnz	r3, 800425a <__sfp+0x12>
 8004254:	4630      	mov	r0, r6
 8004256:	f7ff ffc7 	bl	80041e8 <__sinit>
 800425a:	3648      	adds	r6, #72	; 0x48
 800425c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004260:	3b01      	subs	r3, #1
 8004262:	d503      	bpl.n	800426c <__sfp+0x24>
 8004264:	6833      	ldr	r3, [r6, #0]
 8004266:	b133      	cbz	r3, 8004276 <__sfp+0x2e>
 8004268:	6836      	ldr	r6, [r6, #0]
 800426a:	e7f7      	b.n	800425c <__sfp+0x14>
 800426c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004270:	b16d      	cbz	r5, 800428e <__sfp+0x46>
 8004272:	3468      	adds	r4, #104	; 0x68
 8004274:	e7f4      	b.n	8004260 <__sfp+0x18>
 8004276:	2104      	movs	r1, #4
 8004278:	4638      	mov	r0, r7
 800427a:	f7ff ff9f 	bl	80041bc <__sfmoreglue>
 800427e:	6030      	str	r0, [r6, #0]
 8004280:	2800      	cmp	r0, #0
 8004282:	d1f1      	bne.n	8004268 <__sfp+0x20>
 8004284:	230c      	movs	r3, #12
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	4604      	mov	r4, r0
 800428a:	4620      	mov	r0, r4
 800428c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800428e:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <__sfp+0x74>)
 8004290:	6665      	str	r5, [r4, #100]	; 0x64
 8004292:	e9c4 5500 	strd	r5, r5, [r4]
 8004296:	60a5      	str	r5, [r4, #8]
 8004298:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800429c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80042a0:	2208      	movs	r2, #8
 80042a2:	4629      	mov	r1, r5
 80042a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042a8:	f7ff fd62 	bl	8003d70 <memset>
 80042ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042b4:	e7e9      	b.n	800428a <__sfp+0x42>
 80042b6:	bf00      	nop
 80042b8:	08004da0 	.word	0x08004da0
 80042bc:	ffff0001 	.word	0xffff0001

080042c0 <_fwalk_reent>:
 80042c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c4:	4680      	mov	r8, r0
 80042c6:	4689      	mov	r9, r1
 80042c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042cc:	2600      	movs	r6, #0
 80042ce:	b914      	cbnz	r4, 80042d6 <_fwalk_reent+0x16>
 80042d0:	4630      	mov	r0, r6
 80042d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80042da:	3f01      	subs	r7, #1
 80042dc:	d501      	bpl.n	80042e2 <_fwalk_reent+0x22>
 80042de:	6824      	ldr	r4, [r4, #0]
 80042e0:	e7f5      	b.n	80042ce <_fwalk_reent+0xe>
 80042e2:	89ab      	ldrh	r3, [r5, #12]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d907      	bls.n	80042f8 <_fwalk_reent+0x38>
 80042e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042ec:	3301      	adds	r3, #1
 80042ee:	d003      	beq.n	80042f8 <_fwalk_reent+0x38>
 80042f0:	4629      	mov	r1, r5
 80042f2:	4640      	mov	r0, r8
 80042f4:	47c8      	blx	r9
 80042f6:	4306      	orrs	r6, r0
 80042f8:	3568      	adds	r5, #104	; 0x68
 80042fa:	e7ee      	b.n	80042da <_fwalk_reent+0x1a>

080042fc <__swhatbuf_r>:
 80042fc:	b570      	push	{r4, r5, r6, lr}
 80042fe:	460e      	mov	r6, r1
 8004300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004304:	2900      	cmp	r1, #0
 8004306:	b096      	sub	sp, #88	; 0x58
 8004308:	4614      	mov	r4, r2
 800430a:	461d      	mov	r5, r3
 800430c:	da07      	bge.n	800431e <__swhatbuf_r+0x22>
 800430e:	2300      	movs	r3, #0
 8004310:	602b      	str	r3, [r5, #0]
 8004312:	89b3      	ldrh	r3, [r6, #12]
 8004314:	061a      	lsls	r2, r3, #24
 8004316:	d410      	bmi.n	800433a <__swhatbuf_r+0x3e>
 8004318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800431c:	e00e      	b.n	800433c <__swhatbuf_r+0x40>
 800431e:	466a      	mov	r2, sp
 8004320:	f000 fc48 	bl	8004bb4 <_fstat_r>
 8004324:	2800      	cmp	r0, #0
 8004326:	dbf2      	blt.n	800430e <__swhatbuf_r+0x12>
 8004328:	9a01      	ldr	r2, [sp, #4]
 800432a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800432e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004332:	425a      	negs	r2, r3
 8004334:	415a      	adcs	r2, r3
 8004336:	602a      	str	r2, [r5, #0]
 8004338:	e7ee      	b.n	8004318 <__swhatbuf_r+0x1c>
 800433a:	2340      	movs	r3, #64	; 0x40
 800433c:	2000      	movs	r0, #0
 800433e:	6023      	str	r3, [r4, #0]
 8004340:	b016      	add	sp, #88	; 0x58
 8004342:	bd70      	pop	{r4, r5, r6, pc}

08004344 <__smakebuf_r>:
 8004344:	898b      	ldrh	r3, [r1, #12]
 8004346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004348:	079d      	lsls	r5, r3, #30
 800434a:	4606      	mov	r6, r0
 800434c:	460c      	mov	r4, r1
 800434e:	d507      	bpl.n	8004360 <__smakebuf_r+0x1c>
 8004350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	6123      	str	r3, [r4, #16]
 8004358:	2301      	movs	r3, #1
 800435a:	6163      	str	r3, [r4, #20]
 800435c:	b002      	add	sp, #8
 800435e:	bd70      	pop	{r4, r5, r6, pc}
 8004360:	ab01      	add	r3, sp, #4
 8004362:	466a      	mov	r2, sp
 8004364:	f7ff ffca 	bl	80042fc <__swhatbuf_r>
 8004368:	9900      	ldr	r1, [sp, #0]
 800436a:	4605      	mov	r5, r0
 800436c:	4630      	mov	r0, r6
 800436e:	f000 f877 	bl	8004460 <_malloc_r>
 8004372:	b948      	cbnz	r0, 8004388 <__smakebuf_r+0x44>
 8004374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004378:	059a      	lsls	r2, r3, #22
 800437a:	d4ef      	bmi.n	800435c <__smakebuf_r+0x18>
 800437c:	f023 0303 	bic.w	r3, r3, #3
 8004380:	f043 0302 	orr.w	r3, r3, #2
 8004384:	81a3      	strh	r3, [r4, #12]
 8004386:	e7e3      	b.n	8004350 <__smakebuf_r+0xc>
 8004388:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <__smakebuf_r+0x7c>)
 800438a:	62b3      	str	r3, [r6, #40]	; 0x28
 800438c:	89a3      	ldrh	r3, [r4, #12]
 800438e:	6020      	str	r0, [r4, #0]
 8004390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004394:	81a3      	strh	r3, [r4, #12]
 8004396:	9b00      	ldr	r3, [sp, #0]
 8004398:	6163      	str	r3, [r4, #20]
 800439a:	9b01      	ldr	r3, [sp, #4]
 800439c:	6120      	str	r0, [r4, #16]
 800439e:	b15b      	cbz	r3, 80043b8 <__smakebuf_r+0x74>
 80043a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043a4:	4630      	mov	r0, r6
 80043a6:	f000 fc17 	bl	8004bd8 <_isatty_r>
 80043aa:	b128      	cbz	r0, 80043b8 <__smakebuf_r+0x74>
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	f023 0303 	bic.w	r3, r3, #3
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	81a3      	strh	r3, [r4, #12]
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	431d      	orrs	r5, r3
 80043bc:	81a5      	strh	r5, [r4, #12]
 80043be:	e7cd      	b.n	800435c <__smakebuf_r+0x18>
 80043c0:	080041b1 	.word	0x080041b1

080043c4 <_free_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4605      	mov	r5, r0
 80043c8:	2900      	cmp	r1, #0
 80043ca:	d045      	beq.n	8004458 <_free_r+0x94>
 80043cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d0:	1f0c      	subs	r4, r1, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bfb8      	it	lt
 80043d6:	18e4      	addlt	r4, r4, r3
 80043d8:	f000 fc44 	bl	8004c64 <__malloc_lock>
 80043dc:	4a1f      	ldr	r2, [pc, #124]	; (800445c <_free_r+0x98>)
 80043de:	6813      	ldr	r3, [r2, #0]
 80043e0:	4610      	mov	r0, r2
 80043e2:	b933      	cbnz	r3, 80043f2 <_free_r+0x2e>
 80043e4:	6063      	str	r3, [r4, #4]
 80043e6:	6014      	str	r4, [r2, #0]
 80043e8:	4628      	mov	r0, r5
 80043ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043ee:	f000 bc3a 	b.w	8004c66 <__malloc_unlock>
 80043f2:	42a3      	cmp	r3, r4
 80043f4:	d90c      	bls.n	8004410 <_free_r+0x4c>
 80043f6:	6821      	ldr	r1, [r4, #0]
 80043f8:	1862      	adds	r2, r4, r1
 80043fa:	4293      	cmp	r3, r2
 80043fc:	bf04      	itt	eq
 80043fe:	681a      	ldreq	r2, [r3, #0]
 8004400:	685b      	ldreq	r3, [r3, #4]
 8004402:	6063      	str	r3, [r4, #4]
 8004404:	bf04      	itt	eq
 8004406:	1852      	addeq	r2, r2, r1
 8004408:	6022      	streq	r2, [r4, #0]
 800440a:	6004      	str	r4, [r0, #0]
 800440c:	e7ec      	b.n	80043e8 <_free_r+0x24>
 800440e:	4613      	mov	r3, r2
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	b10a      	cbz	r2, 8004418 <_free_r+0x54>
 8004414:	42a2      	cmp	r2, r4
 8004416:	d9fa      	bls.n	800440e <_free_r+0x4a>
 8004418:	6819      	ldr	r1, [r3, #0]
 800441a:	1858      	adds	r0, r3, r1
 800441c:	42a0      	cmp	r0, r4
 800441e:	d10b      	bne.n	8004438 <_free_r+0x74>
 8004420:	6820      	ldr	r0, [r4, #0]
 8004422:	4401      	add	r1, r0
 8004424:	1858      	adds	r0, r3, r1
 8004426:	4282      	cmp	r2, r0
 8004428:	6019      	str	r1, [r3, #0]
 800442a:	d1dd      	bne.n	80043e8 <_free_r+0x24>
 800442c:	6810      	ldr	r0, [r2, #0]
 800442e:	6852      	ldr	r2, [r2, #4]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	4401      	add	r1, r0
 8004434:	6019      	str	r1, [r3, #0]
 8004436:	e7d7      	b.n	80043e8 <_free_r+0x24>
 8004438:	d902      	bls.n	8004440 <_free_r+0x7c>
 800443a:	230c      	movs	r3, #12
 800443c:	602b      	str	r3, [r5, #0]
 800443e:	e7d3      	b.n	80043e8 <_free_r+0x24>
 8004440:	6820      	ldr	r0, [r4, #0]
 8004442:	1821      	adds	r1, r4, r0
 8004444:	428a      	cmp	r2, r1
 8004446:	bf04      	itt	eq
 8004448:	6811      	ldreq	r1, [r2, #0]
 800444a:	6852      	ldreq	r2, [r2, #4]
 800444c:	6062      	str	r2, [r4, #4]
 800444e:	bf04      	itt	eq
 8004450:	1809      	addeq	r1, r1, r0
 8004452:	6021      	streq	r1, [r4, #0]
 8004454:	605c      	str	r4, [r3, #4]
 8004456:	e7c7      	b.n	80043e8 <_free_r+0x24>
 8004458:	bd38      	pop	{r3, r4, r5, pc}
 800445a:	bf00      	nop
 800445c:	20000094 	.word	0x20000094

08004460 <_malloc_r>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	1ccd      	adds	r5, r1, #3
 8004464:	f025 0503 	bic.w	r5, r5, #3
 8004468:	3508      	adds	r5, #8
 800446a:	2d0c      	cmp	r5, #12
 800446c:	bf38      	it	cc
 800446e:	250c      	movcc	r5, #12
 8004470:	2d00      	cmp	r5, #0
 8004472:	4606      	mov	r6, r0
 8004474:	db01      	blt.n	800447a <_malloc_r+0x1a>
 8004476:	42a9      	cmp	r1, r5
 8004478:	d903      	bls.n	8004482 <_malloc_r+0x22>
 800447a:	230c      	movs	r3, #12
 800447c:	6033      	str	r3, [r6, #0]
 800447e:	2000      	movs	r0, #0
 8004480:	bd70      	pop	{r4, r5, r6, pc}
 8004482:	f000 fbef 	bl	8004c64 <__malloc_lock>
 8004486:	4a21      	ldr	r2, [pc, #132]	; (800450c <_malloc_r+0xac>)
 8004488:	6814      	ldr	r4, [r2, #0]
 800448a:	4621      	mov	r1, r4
 800448c:	b991      	cbnz	r1, 80044b4 <_malloc_r+0x54>
 800448e:	4c20      	ldr	r4, [pc, #128]	; (8004510 <_malloc_r+0xb0>)
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	b91b      	cbnz	r3, 800449c <_malloc_r+0x3c>
 8004494:	4630      	mov	r0, r6
 8004496:	f000 fb17 	bl	8004ac8 <_sbrk_r>
 800449a:	6020      	str	r0, [r4, #0]
 800449c:	4629      	mov	r1, r5
 800449e:	4630      	mov	r0, r6
 80044a0:	f000 fb12 	bl	8004ac8 <_sbrk_r>
 80044a4:	1c43      	adds	r3, r0, #1
 80044a6:	d124      	bne.n	80044f2 <_malloc_r+0x92>
 80044a8:	230c      	movs	r3, #12
 80044aa:	6033      	str	r3, [r6, #0]
 80044ac:	4630      	mov	r0, r6
 80044ae:	f000 fbda 	bl	8004c66 <__malloc_unlock>
 80044b2:	e7e4      	b.n	800447e <_malloc_r+0x1e>
 80044b4:	680b      	ldr	r3, [r1, #0]
 80044b6:	1b5b      	subs	r3, r3, r5
 80044b8:	d418      	bmi.n	80044ec <_malloc_r+0x8c>
 80044ba:	2b0b      	cmp	r3, #11
 80044bc:	d90f      	bls.n	80044de <_malloc_r+0x7e>
 80044be:	600b      	str	r3, [r1, #0]
 80044c0:	50cd      	str	r5, [r1, r3]
 80044c2:	18cc      	adds	r4, r1, r3
 80044c4:	4630      	mov	r0, r6
 80044c6:	f000 fbce 	bl	8004c66 <__malloc_unlock>
 80044ca:	f104 000b 	add.w	r0, r4, #11
 80044ce:	1d23      	adds	r3, r4, #4
 80044d0:	f020 0007 	bic.w	r0, r0, #7
 80044d4:	1ac3      	subs	r3, r0, r3
 80044d6:	d0d3      	beq.n	8004480 <_malloc_r+0x20>
 80044d8:	425a      	negs	r2, r3
 80044da:	50e2      	str	r2, [r4, r3]
 80044dc:	e7d0      	b.n	8004480 <_malloc_r+0x20>
 80044de:	428c      	cmp	r4, r1
 80044e0:	684b      	ldr	r3, [r1, #4]
 80044e2:	bf16      	itet	ne
 80044e4:	6063      	strne	r3, [r4, #4]
 80044e6:	6013      	streq	r3, [r2, #0]
 80044e8:	460c      	movne	r4, r1
 80044ea:	e7eb      	b.n	80044c4 <_malloc_r+0x64>
 80044ec:	460c      	mov	r4, r1
 80044ee:	6849      	ldr	r1, [r1, #4]
 80044f0:	e7cc      	b.n	800448c <_malloc_r+0x2c>
 80044f2:	1cc4      	adds	r4, r0, #3
 80044f4:	f024 0403 	bic.w	r4, r4, #3
 80044f8:	42a0      	cmp	r0, r4
 80044fa:	d005      	beq.n	8004508 <_malloc_r+0xa8>
 80044fc:	1a21      	subs	r1, r4, r0
 80044fe:	4630      	mov	r0, r6
 8004500:	f000 fae2 	bl	8004ac8 <_sbrk_r>
 8004504:	3001      	adds	r0, #1
 8004506:	d0cf      	beq.n	80044a8 <_malloc_r+0x48>
 8004508:	6025      	str	r5, [r4, #0]
 800450a:	e7db      	b.n	80044c4 <_malloc_r+0x64>
 800450c:	20000094 	.word	0x20000094
 8004510:	20000098 	.word	0x20000098

08004514 <__ssputs_r>:
 8004514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004518:	688e      	ldr	r6, [r1, #8]
 800451a:	429e      	cmp	r6, r3
 800451c:	4682      	mov	sl, r0
 800451e:	460c      	mov	r4, r1
 8004520:	4690      	mov	r8, r2
 8004522:	4699      	mov	r9, r3
 8004524:	d837      	bhi.n	8004596 <__ssputs_r+0x82>
 8004526:	898a      	ldrh	r2, [r1, #12]
 8004528:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800452c:	d031      	beq.n	8004592 <__ssputs_r+0x7e>
 800452e:	6825      	ldr	r5, [r4, #0]
 8004530:	6909      	ldr	r1, [r1, #16]
 8004532:	1a6f      	subs	r7, r5, r1
 8004534:	6965      	ldr	r5, [r4, #20]
 8004536:	2302      	movs	r3, #2
 8004538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800453c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004540:	f109 0301 	add.w	r3, r9, #1
 8004544:	443b      	add	r3, r7
 8004546:	429d      	cmp	r5, r3
 8004548:	bf38      	it	cc
 800454a:	461d      	movcc	r5, r3
 800454c:	0553      	lsls	r3, r2, #21
 800454e:	d530      	bpl.n	80045b2 <__ssputs_r+0x9e>
 8004550:	4629      	mov	r1, r5
 8004552:	f7ff ff85 	bl	8004460 <_malloc_r>
 8004556:	4606      	mov	r6, r0
 8004558:	b950      	cbnz	r0, 8004570 <__ssputs_r+0x5c>
 800455a:	230c      	movs	r3, #12
 800455c:	f8ca 3000 	str.w	r3, [sl]
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004566:	81a3      	strh	r3, [r4, #12]
 8004568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004570:	463a      	mov	r2, r7
 8004572:	6921      	ldr	r1, [r4, #16]
 8004574:	f000 fb52 	bl	8004c1c <memcpy>
 8004578:	89a3      	ldrh	r3, [r4, #12]
 800457a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800457e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004582:	81a3      	strh	r3, [r4, #12]
 8004584:	6126      	str	r6, [r4, #16]
 8004586:	6165      	str	r5, [r4, #20]
 8004588:	443e      	add	r6, r7
 800458a:	1bed      	subs	r5, r5, r7
 800458c:	6026      	str	r6, [r4, #0]
 800458e:	60a5      	str	r5, [r4, #8]
 8004590:	464e      	mov	r6, r9
 8004592:	454e      	cmp	r6, r9
 8004594:	d900      	bls.n	8004598 <__ssputs_r+0x84>
 8004596:	464e      	mov	r6, r9
 8004598:	4632      	mov	r2, r6
 800459a:	4641      	mov	r1, r8
 800459c:	6820      	ldr	r0, [r4, #0]
 800459e:	f000 fb48 	bl	8004c32 <memmove>
 80045a2:	68a3      	ldr	r3, [r4, #8]
 80045a4:	1b9b      	subs	r3, r3, r6
 80045a6:	60a3      	str	r3, [r4, #8]
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	441e      	add	r6, r3
 80045ac:	6026      	str	r6, [r4, #0]
 80045ae:	2000      	movs	r0, #0
 80045b0:	e7dc      	b.n	800456c <__ssputs_r+0x58>
 80045b2:	462a      	mov	r2, r5
 80045b4:	f000 fb58 	bl	8004c68 <_realloc_r>
 80045b8:	4606      	mov	r6, r0
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d1e2      	bne.n	8004584 <__ssputs_r+0x70>
 80045be:	6921      	ldr	r1, [r4, #16]
 80045c0:	4650      	mov	r0, sl
 80045c2:	f7ff feff 	bl	80043c4 <_free_r>
 80045c6:	e7c8      	b.n	800455a <__ssputs_r+0x46>

080045c8 <_svfiprintf_r>:
 80045c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045cc:	461d      	mov	r5, r3
 80045ce:	898b      	ldrh	r3, [r1, #12]
 80045d0:	061f      	lsls	r7, r3, #24
 80045d2:	b09d      	sub	sp, #116	; 0x74
 80045d4:	4680      	mov	r8, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	4616      	mov	r6, r2
 80045da:	d50f      	bpl.n	80045fc <_svfiprintf_r+0x34>
 80045dc:	690b      	ldr	r3, [r1, #16]
 80045de:	b96b      	cbnz	r3, 80045fc <_svfiprintf_r+0x34>
 80045e0:	2140      	movs	r1, #64	; 0x40
 80045e2:	f7ff ff3d 	bl	8004460 <_malloc_r>
 80045e6:	6020      	str	r0, [r4, #0]
 80045e8:	6120      	str	r0, [r4, #16]
 80045ea:	b928      	cbnz	r0, 80045f8 <_svfiprintf_r+0x30>
 80045ec:	230c      	movs	r3, #12
 80045ee:	f8c8 3000 	str.w	r3, [r8]
 80045f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045f6:	e0c8      	b.n	800478a <_svfiprintf_r+0x1c2>
 80045f8:	2340      	movs	r3, #64	; 0x40
 80045fa:	6163      	str	r3, [r4, #20]
 80045fc:	2300      	movs	r3, #0
 80045fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004600:	2320      	movs	r3, #32
 8004602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004606:	2330      	movs	r3, #48	; 0x30
 8004608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800460c:	9503      	str	r5, [sp, #12]
 800460e:	f04f 0b01 	mov.w	fp, #1
 8004612:	4637      	mov	r7, r6
 8004614:	463d      	mov	r5, r7
 8004616:	f815 3b01 	ldrb.w	r3, [r5], #1
 800461a:	b10b      	cbz	r3, 8004620 <_svfiprintf_r+0x58>
 800461c:	2b25      	cmp	r3, #37	; 0x25
 800461e:	d13e      	bne.n	800469e <_svfiprintf_r+0xd6>
 8004620:	ebb7 0a06 	subs.w	sl, r7, r6
 8004624:	d00b      	beq.n	800463e <_svfiprintf_r+0x76>
 8004626:	4653      	mov	r3, sl
 8004628:	4632      	mov	r2, r6
 800462a:	4621      	mov	r1, r4
 800462c:	4640      	mov	r0, r8
 800462e:	f7ff ff71 	bl	8004514 <__ssputs_r>
 8004632:	3001      	adds	r0, #1
 8004634:	f000 80a4 	beq.w	8004780 <_svfiprintf_r+0x1b8>
 8004638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800463a:	4453      	add	r3, sl
 800463c:	9309      	str	r3, [sp, #36]	; 0x24
 800463e:	783b      	ldrb	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 809d 	beq.w	8004780 <_svfiprintf_r+0x1b8>
 8004646:	2300      	movs	r3, #0
 8004648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800464c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004650:	9304      	str	r3, [sp, #16]
 8004652:	9307      	str	r3, [sp, #28]
 8004654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004658:	931a      	str	r3, [sp, #104]	; 0x68
 800465a:	462f      	mov	r7, r5
 800465c:	2205      	movs	r2, #5
 800465e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004662:	4850      	ldr	r0, [pc, #320]	; (80047a4 <_svfiprintf_r+0x1dc>)
 8004664:	f7fb fdbc 	bl	80001e0 <memchr>
 8004668:	9b04      	ldr	r3, [sp, #16]
 800466a:	b9d0      	cbnz	r0, 80046a2 <_svfiprintf_r+0xda>
 800466c:	06d9      	lsls	r1, r3, #27
 800466e:	bf44      	itt	mi
 8004670:	2220      	movmi	r2, #32
 8004672:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004676:	071a      	lsls	r2, r3, #28
 8004678:	bf44      	itt	mi
 800467a:	222b      	movmi	r2, #43	; 0x2b
 800467c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004680:	782a      	ldrb	r2, [r5, #0]
 8004682:	2a2a      	cmp	r2, #42	; 0x2a
 8004684:	d015      	beq.n	80046b2 <_svfiprintf_r+0xea>
 8004686:	9a07      	ldr	r2, [sp, #28]
 8004688:	462f      	mov	r7, r5
 800468a:	2000      	movs	r0, #0
 800468c:	250a      	movs	r5, #10
 800468e:	4639      	mov	r1, r7
 8004690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004694:	3b30      	subs	r3, #48	; 0x30
 8004696:	2b09      	cmp	r3, #9
 8004698:	d94d      	bls.n	8004736 <_svfiprintf_r+0x16e>
 800469a:	b1b8      	cbz	r0, 80046cc <_svfiprintf_r+0x104>
 800469c:	e00f      	b.n	80046be <_svfiprintf_r+0xf6>
 800469e:	462f      	mov	r7, r5
 80046a0:	e7b8      	b.n	8004614 <_svfiprintf_r+0x4c>
 80046a2:	4a40      	ldr	r2, [pc, #256]	; (80047a4 <_svfiprintf_r+0x1dc>)
 80046a4:	1a80      	subs	r0, r0, r2
 80046a6:	fa0b f000 	lsl.w	r0, fp, r0
 80046aa:	4318      	orrs	r0, r3
 80046ac:	9004      	str	r0, [sp, #16]
 80046ae:	463d      	mov	r5, r7
 80046b0:	e7d3      	b.n	800465a <_svfiprintf_r+0x92>
 80046b2:	9a03      	ldr	r2, [sp, #12]
 80046b4:	1d11      	adds	r1, r2, #4
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	9103      	str	r1, [sp, #12]
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	db01      	blt.n	80046c2 <_svfiprintf_r+0xfa>
 80046be:	9207      	str	r2, [sp, #28]
 80046c0:	e004      	b.n	80046cc <_svfiprintf_r+0x104>
 80046c2:	4252      	negs	r2, r2
 80046c4:	f043 0302 	orr.w	r3, r3, #2
 80046c8:	9207      	str	r2, [sp, #28]
 80046ca:	9304      	str	r3, [sp, #16]
 80046cc:	783b      	ldrb	r3, [r7, #0]
 80046ce:	2b2e      	cmp	r3, #46	; 0x2e
 80046d0:	d10c      	bne.n	80046ec <_svfiprintf_r+0x124>
 80046d2:	787b      	ldrb	r3, [r7, #1]
 80046d4:	2b2a      	cmp	r3, #42	; 0x2a
 80046d6:	d133      	bne.n	8004740 <_svfiprintf_r+0x178>
 80046d8:	9b03      	ldr	r3, [sp, #12]
 80046da:	1d1a      	adds	r2, r3, #4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	9203      	str	r2, [sp, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bfb8      	it	lt
 80046e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80046e8:	3702      	adds	r7, #2
 80046ea:	9305      	str	r3, [sp, #20]
 80046ec:	4d2e      	ldr	r5, [pc, #184]	; (80047a8 <_svfiprintf_r+0x1e0>)
 80046ee:	7839      	ldrb	r1, [r7, #0]
 80046f0:	2203      	movs	r2, #3
 80046f2:	4628      	mov	r0, r5
 80046f4:	f7fb fd74 	bl	80001e0 <memchr>
 80046f8:	b138      	cbz	r0, 800470a <_svfiprintf_r+0x142>
 80046fa:	2340      	movs	r3, #64	; 0x40
 80046fc:	1b40      	subs	r0, r0, r5
 80046fe:	fa03 f000 	lsl.w	r0, r3, r0
 8004702:	9b04      	ldr	r3, [sp, #16]
 8004704:	4303      	orrs	r3, r0
 8004706:	3701      	adds	r7, #1
 8004708:	9304      	str	r3, [sp, #16]
 800470a:	7839      	ldrb	r1, [r7, #0]
 800470c:	4827      	ldr	r0, [pc, #156]	; (80047ac <_svfiprintf_r+0x1e4>)
 800470e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004712:	2206      	movs	r2, #6
 8004714:	1c7e      	adds	r6, r7, #1
 8004716:	f7fb fd63 	bl	80001e0 <memchr>
 800471a:	2800      	cmp	r0, #0
 800471c:	d038      	beq.n	8004790 <_svfiprintf_r+0x1c8>
 800471e:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <_svfiprintf_r+0x1e8>)
 8004720:	bb13      	cbnz	r3, 8004768 <_svfiprintf_r+0x1a0>
 8004722:	9b03      	ldr	r3, [sp, #12]
 8004724:	3307      	adds	r3, #7
 8004726:	f023 0307 	bic.w	r3, r3, #7
 800472a:	3308      	adds	r3, #8
 800472c:	9303      	str	r3, [sp, #12]
 800472e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004730:	444b      	add	r3, r9
 8004732:	9309      	str	r3, [sp, #36]	; 0x24
 8004734:	e76d      	b.n	8004612 <_svfiprintf_r+0x4a>
 8004736:	fb05 3202 	mla	r2, r5, r2, r3
 800473a:	2001      	movs	r0, #1
 800473c:	460f      	mov	r7, r1
 800473e:	e7a6      	b.n	800468e <_svfiprintf_r+0xc6>
 8004740:	2300      	movs	r3, #0
 8004742:	3701      	adds	r7, #1
 8004744:	9305      	str	r3, [sp, #20]
 8004746:	4619      	mov	r1, r3
 8004748:	250a      	movs	r5, #10
 800474a:	4638      	mov	r0, r7
 800474c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004750:	3a30      	subs	r2, #48	; 0x30
 8004752:	2a09      	cmp	r2, #9
 8004754:	d903      	bls.n	800475e <_svfiprintf_r+0x196>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0c8      	beq.n	80046ec <_svfiprintf_r+0x124>
 800475a:	9105      	str	r1, [sp, #20]
 800475c:	e7c6      	b.n	80046ec <_svfiprintf_r+0x124>
 800475e:	fb05 2101 	mla	r1, r5, r1, r2
 8004762:	2301      	movs	r3, #1
 8004764:	4607      	mov	r7, r0
 8004766:	e7f0      	b.n	800474a <_svfiprintf_r+0x182>
 8004768:	ab03      	add	r3, sp, #12
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	4622      	mov	r2, r4
 800476e:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <_svfiprintf_r+0x1ec>)
 8004770:	a904      	add	r1, sp, #16
 8004772:	4640      	mov	r0, r8
 8004774:	f3af 8000 	nop.w
 8004778:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800477c:	4681      	mov	r9, r0
 800477e:	d1d6      	bne.n	800472e <_svfiprintf_r+0x166>
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	065b      	lsls	r3, r3, #25
 8004784:	f53f af35 	bmi.w	80045f2 <_svfiprintf_r+0x2a>
 8004788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800478a:	b01d      	add	sp, #116	; 0x74
 800478c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004790:	ab03      	add	r3, sp, #12
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4622      	mov	r2, r4
 8004796:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <_svfiprintf_r+0x1ec>)
 8004798:	a904      	add	r1, sp, #16
 800479a:	4640      	mov	r0, r8
 800479c:	f000 f882 	bl	80048a4 <_printf_i>
 80047a0:	e7ea      	b.n	8004778 <_svfiprintf_r+0x1b0>
 80047a2:	bf00      	nop
 80047a4:	08004e04 	.word	0x08004e04
 80047a8:	08004e0a 	.word	0x08004e0a
 80047ac:	08004e0e 	.word	0x08004e0e
 80047b0:	00000000 	.word	0x00000000
 80047b4:	08004515 	.word	0x08004515

080047b8 <_printf_common>:
 80047b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	4691      	mov	r9, r2
 80047be:	461f      	mov	r7, r3
 80047c0:	688a      	ldr	r2, [r1, #8]
 80047c2:	690b      	ldr	r3, [r1, #16]
 80047c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047c8:	4293      	cmp	r3, r2
 80047ca:	bfb8      	it	lt
 80047cc:	4613      	movlt	r3, r2
 80047ce:	f8c9 3000 	str.w	r3, [r9]
 80047d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047d6:	4606      	mov	r6, r0
 80047d8:	460c      	mov	r4, r1
 80047da:	b112      	cbz	r2, 80047e2 <_printf_common+0x2a>
 80047dc:	3301      	adds	r3, #1
 80047de:	f8c9 3000 	str.w	r3, [r9]
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	0699      	lsls	r1, r3, #26
 80047e6:	bf42      	ittt	mi
 80047e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80047ec:	3302      	addmi	r3, #2
 80047ee:	f8c9 3000 	strmi.w	r3, [r9]
 80047f2:	6825      	ldr	r5, [r4, #0]
 80047f4:	f015 0506 	ands.w	r5, r5, #6
 80047f8:	d107      	bne.n	800480a <_printf_common+0x52>
 80047fa:	f104 0a19 	add.w	sl, r4, #25
 80047fe:	68e3      	ldr	r3, [r4, #12]
 8004800:	f8d9 2000 	ldr.w	r2, [r9]
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	42ab      	cmp	r3, r5
 8004808:	dc28      	bgt.n	800485c <_printf_common+0xa4>
 800480a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800480e:	6822      	ldr	r2, [r4, #0]
 8004810:	3300      	adds	r3, #0
 8004812:	bf18      	it	ne
 8004814:	2301      	movne	r3, #1
 8004816:	0692      	lsls	r2, r2, #26
 8004818:	d42d      	bmi.n	8004876 <_printf_common+0xbe>
 800481a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800481e:	4639      	mov	r1, r7
 8004820:	4630      	mov	r0, r6
 8004822:	47c0      	blx	r8
 8004824:	3001      	adds	r0, #1
 8004826:	d020      	beq.n	800486a <_printf_common+0xb2>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	68e5      	ldr	r5, [r4, #12]
 800482c:	f8d9 2000 	ldr.w	r2, [r9]
 8004830:	f003 0306 	and.w	r3, r3, #6
 8004834:	2b04      	cmp	r3, #4
 8004836:	bf08      	it	eq
 8004838:	1aad      	subeq	r5, r5, r2
 800483a:	68a3      	ldr	r3, [r4, #8]
 800483c:	6922      	ldr	r2, [r4, #16]
 800483e:	bf0c      	ite	eq
 8004840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004844:	2500      	movne	r5, #0
 8004846:	4293      	cmp	r3, r2
 8004848:	bfc4      	itt	gt
 800484a:	1a9b      	subgt	r3, r3, r2
 800484c:	18ed      	addgt	r5, r5, r3
 800484e:	f04f 0900 	mov.w	r9, #0
 8004852:	341a      	adds	r4, #26
 8004854:	454d      	cmp	r5, r9
 8004856:	d11a      	bne.n	800488e <_printf_common+0xd6>
 8004858:	2000      	movs	r0, #0
 800485a:	e008      	b.n	800486e <_printf_common+0xb6>
 800485c:	2301      	movs	r3, #1
 800485e:	4652      	mov	r2, sl
 8004860:	4639      	mov	r1, r7
 8004862:	4630      	mov	r0, r6
 8004864:	47c0      	blx	r8
 8004866:	3001      	adds	r0, #1
 8004868:	d103      	bne.n	8004872 <_printf_common+0xba>
 800486a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004872:	3501      	adds	r5, #1
 8004874:	e7c3      	b.n	80047fe <_printf_common+0x46>
 8004876:	18e1      	adds	r1, r4, r3
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	2030      	movs	r0, #48	; 0x30
 800487c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004880:	4422      	add	r2, r4
 8004882:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004886:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800488a:	3302      	adds	r3, #2
 800488c:	e7c5      	b.n	800481a <_printf_common+0x62>
 800488e:	2301      	movs	r3, #1
 8004890:	4622      	mov	r2, r4
 8004892:	4639      	mov	r1, r7
 8004894:	4630      	mov	r0, r6
 8004896:	47c0      	blx	r8
 8004898:	3001      	adds	r0, #1
 800489a:	d0e6      	beq.n	800486a <_printf_common+0xb2>
 800489c:	f109 0901 	add.w	r9, r9, #1
 80048a0:	e7d8      	b.n	8004854 <_printf_common+0x9c>
	...

080048a4 <_printf_i>:
 80048a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80048ac:	460c      	mov	r4, r1
 80048ae:	7e09      	ldrb	r1, [r1, #24]
 80048b0:	b085      	sub	sp, #20
 80048b2:	296e      	cmp	r1, #110	; 0x6e
 80048b4:	4617      	mov	r7, r2
 80048b6:	4606      	mov	r6, r0
 80048b8:	4698      	mov	r8, r3
 80048ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048bc:	f000 80b3 	beq.w	8004a26 <_printf_i+0x182>
 80048c0:	d822      	bhi.n	8004908 <_printf_i+0x64>
 80048c2:	2963      	cmp	r1, #99	; 0x63
 80048c4:	d036      	beq.n	8004934 <_printf_i+0x90>
 80048c6:	d80a      	bhi.n	80048de <_printf_i+0x3a>
 80048c8:	2900      	cmp	r1, #0
 80048ca:	f000 80b9 	beq.w	8004a40 <_printf_i+0x19c>
 80048ce:	2958      	cmp	r1, #88	; 0x58
 80048d0:	f000 8083 	beq.w	80049da <_printf_i+0x136>
 80048d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80048dc:	e032      	b.n	8004944 <_printf_i+0xa0>
 80048de:	2964      	cmp	r1, #100	; 0x64
 80048e0:	d001      	beq.n	80048e6 <_printf_i+0x42>
 80048e2:	2969      	cmp	r1, #105	; 0x69
 80048e4:	d1f6      	bne.n	80048d4 <_printf_i+0x30>
 80048e6:	6820      	ldr	r0, [r4, #0]
 80048e8:	6813      	ldr	r3, [r2, #0]
 80048ea:	0605      	lsls	r5, r0, #24
 80048ec:	f103 0104 	add.w	r1, r3, #4
 80048f0:	d52a      	bpl.n	8004948 <_printf_i+0xa4>
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6011      	str	r1, [r2, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	da03      	bge.n	8004902 <_printf_i+0x5e>
 80048fa:	222d      	movs	r2, #45	; 0x2d
 80048fc:	425b      	negs	r3, r3
 80048fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004902:	486f      	ldr	r0, [pc, #444]	; (8004ac0 <_printf_i+0x21c>)
 8004904:	220a      	movs	r2, #10
 8004906:	e039      	b.n	800497c <_printf_i+0xd8>
 8004908:	2973      	cmp	r1, #115	; 0x73
 800490a:	f000 809d 	beq.w	8004a48 <_printf_i+0x1a4>
 800490e:	d808      	bhi.n	8004922 <_printf_i+0x7e>
 8004910:	296f      	cmp	r1, #111	; 0x6f
 8004912:	d020      	beq.n	8004956 <_printf_i+0xb2>
 8004914:	2970      	cmp	r1, #112	; 0x70
 8004916:	d1dd      	bne.n	80048d4 <_printf_i+0x30>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	f043 0320 	orr.w	r3, r3, #32
 800491e:	6023      	str	r3, [r4, #0]
 8004920:	e003      	b.n	800492a <_printf_i+0x86>
 8004922:	2975      	cmp	r1, #117	; 0x75
 8004924:	d017      	beq.n	8004956 <_printf_i+0xb2>
 8004926:	2978      	cmp	r1, #120	; 0x78
 8004928:	d1d4      	bne.n	80048d4 <_printf_i+0x30>
 800492a:	2378      	movs	r3, #120	; 0x78
 800492c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004930:	4864      	ldr	r0, [pc, #400]	; (8004ac4 <_printf_i+0x220>)
 8004932:	e055      	b.n	80049e0 <_printf_i+0x13c>
 8004934:	6813      	ldr	r3, [r2, #0]
 8004936:	1d19      	adds	r1, r3, #4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6011      	str	r1, [r2, #0]
 800493c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004944:	2301      	movs	r3, #1
 8004946:	e08c      	b.n	8004a62 <_printf_i+0x1be>
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6011      	str	r1, [r2, #0]
 800494c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004950:	bf18      	it	ne
 8004952:	b21b      	sxthne	r3, r3
 8004954:	e7cf      	b.n	80048f6 <_printf_i+0x52>
 8004956:	6813      	ldr	r3, [r2, #0]
 8004958:	6825      	ldr	r5, [r4, #0]
 800495a:	1d18      	adds	r0, r3, #4
 800495c:	6010      	str	r0, [r2, #0]
 800495e:	0628      	lsls	r0, r5, #24
 8004960:	d501      	bpl.n	8004966 <_printf_i+0xc2>
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	e002      	b.n	800496c <_printf_i+0xc8>
 8004966:	0668      	lsls	r0, r5, #25
 8004968:	d5fb      	bpl.n	8004962 <_printf_i+0xbe>
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	4854      	ldr	r0, [pc, #336]	; (8004ac0 <_printf_i+0x21c>)
 800496e:	296f      	cmp	r1, #111	; 0x6f
 8004970:	bf14      	ite	ne
 8004972:	220a      	movne	r2, #10
 8004974:	2208      	moveq	r2, #8
 8004976:	2100      	movs	r1, #0
 8004978:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800497c:	6865      	ldr	r5, [r4, #4]
 800497e:	60a5      	str	r5, [r4, #8]
 8004980:	2d00      	cmp	r5, #0
 8004982:	f2c0 8095 	blt.w	8004ab0 <_printf_i+0x20c>
 8004986:	6821      	ldr	r1, [r4, #0]
 8004988:	f021 0104 	bic.w	r1, r1, #4
 800498c:	6021      	str	r1, [r4, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d13d      	bne.n	8004a0e <_printf_i+0x16a>
 8004992:	2d00      	cmp	r5, #0
 8004994:	f040 808e 	bne.w	8004ab4 <_printf_i+0x210>
 8004998:	4665      	mov	r5, ip
 800499a:	2a08      	cmp	r2, #8
 800499c:	d10b      	bne.n	80049b6 <_printf_i+0x112>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	07db      	lsls	r3, r3, #31
 80049a2:	d508      	bpl.n	80049b6 <_printf_i+0x112>
 80049a4:	6923      	ldr	r3, [r4, #16]
 80049a6:	6862      	ldr	r2, [r4, #4]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	bfde      	ittt	le
 80049ac:	2330      	movle	r3, #48	; 0x30
 80049ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80049b6:	ebac 0305 	sub.w	r3, ip, r5
 80049ba:	6123      	str	r3, [r4, #16]
 80049bc:	f8cd 8000 	str.w	r8, [sp]
 80049c0:	463b      	mov	r3, r7
 80049c2:	aa03      	add	r2, sp, #12
 80049c4:	4621      	mov	r1, r4
 80049c6:	4630      	mov	r0, r6
 80049c8:	f7ff fef6 	bl	80047b8 <_printf_common>
 80049cc:	3001      	adds	r0, #1
 80049ce:	d14d      	bne.n	8004a6c <_printf_i+0x1c8>
 80049d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049d4:	b005      	add	sp, #20
 80049d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049da:	4839      	ldr	r0, [pc, #228]	; (8004ac0 <_printf_i+0x21c>)
 80049dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80049e0:	6813      	ldr	r3, [r2, #0]
 80049e2:	6821      	ldr	r1, [r4, #0]
 80049e4:	1d1d      	adds	r5, r3, #4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6015      	str	r5, [r2, #0]
 80049ea:	060a      	lsls	r2, r1, #24
 80049ec:	d50b      	bpl.n	8004a06 <_printf_i+0x162>
 80049ee:	07ca      	lsls	r2, r1, #31
 80049f0:	bf44      	itt	mi
 80049f2:	f041 0120 	orrmi.w	r1, r1, #32
 80049f6:	6021      	strmi	r1, [r4, #0]
 80049f8:	b91b      	cbnz	r3, 8004a02 <_printf_i+0x15e>
 80049fa:	6822      	ldr	r2, [r4, #0]
 80049fc:	f022 0220 	bic.w	r2, r2, #32
 8004a00:	6022      	str	r2, [r4, #0]
 8004a02:	2210      	movs	r2, #16
 8004a04:	e7b7      	b.n	8004976 <_printf_i+0xd2>
 8004a06:	064d      	lsls	r5, r1, #25
 8004a08:	bf48      	it	mi
 8004a0a:	b29b      	uxthmi	r3, r3
 8004a0c:	e7ef      	b.n	80049ee <_printf_i+0x14a>
 8004a0e:	4665      	mov	r5, ip
 8004a10:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a14:	fb02 3311 	mls	r3, r2, r1, r3
 8004a18:	5cc3      	ldrb	r3, [r0, r3]
 8004a1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a1e:	460b      	mov	r3, r1
 8004a20:	2900      	cmp	r1, #0
 8004a22:	d1f5      	bne.n	8004a10 <_printf_i+0x16c>
 8004a24:	e7b9      	b.n	800499a <_printf_i+0xf6>
 8004a26:	6813      	ldr	r3, [r2, #0]
 8004a28:	6825      	ldr	r5, [r4, #0]
 8004a2a:	6961      	ldr	r1, [r4, #20]
 8004a2c:	1d18      	adds	r0, r3, #4
 8004a2e:	6010      	str	r0, [r2, #0]
 8004a30:	0628      	lsls	r0, r5, #24
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	d501      	bpl.n	8004a3a <_printf_i+0x196>
 8004a36:	6019      	str	r1, [r3, #0]
 8004a38:	e002      	b.n	8004a40 <_printf_i+0x19c>
 8004a3a:	066a      	lsls	r2, r5, #25
 8004a3c:	d5fb      	bpl.n	8004a36 <_printf_i+0x192>
 8004a3e:	8019      	strh	r1, [r3, #0]
 8004a40:	2300      	movs	r3, #0
 8004a42:	6123      	str	r3, [r4, #16]
 8004a44:	4665      	mov	r5, ip
 8004a46:	e7b9      	b.n	80049bc <_printf_i+0x118>
 8004a48:	6813      	ldr	r3, [r2, #0]
 8004a4a:	1d19      	adds	r1, r3, #4
 8004a4c:	6011      	str	r1, [r2, #0]
 8004a4e:	681d      	ldr	r5, [r3, #0]
 8004a50:	6862      	ldr	r2, [r4, #4]
 8004a52:	2100      	movs	r1, #0
 8004a54:	4628      	mov	r0, r5
 8004a56:	f7fb fbc3 	bl	80001e0 <memchr>
 8004a5a:	b108      	cbz	r0, 8004a60 <_printf_i+0x1bc>
 8004a5c:	1b40      	subs	r0, r0, r5
 8004a5e:	6060      	str	r0, [r4, #4]
 8004a60:	6863      	ldr	r3, [r4, #4]
 8004a62:	6123      	str	r3, [r4, #16]
 8004a64:	2300      	movs	r3, #0
 8004a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a6a:	e7a7      	b.n	80049bc <_printf_i+0x118>
 8004a6c:	6923      	ldr	r3, [r4, #16]
 8004a6e:	462a      	mov	r2, r5
 8004a70:	4639      	mov	r1, r7
 8004a72:	4630      	mov	r0, r6
 8004a74:	47c0      	blx	r8
 8004a76:	3001      	adds	r0, #1
 8004a78:	d0aa      	beq.n	80049d0 <_printf_i+0x12c>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	079b      	lsls	r3, r3, #30
 8004a7e:	d413      	bmi.n	8004aa8 <_printf_i+0x204>
 8004a80:	68e0      	ldr	r0, [r4, #12]
 8004a82:	9b03      	ldr	r3, [sp, #12]
 8004a84:	4298      	cmp	r0, r3
 8004a86:	bfb8      	it	lt
 8004a88:	4618      	movlt	r0, r3
 8004a8a:	e7a3      	b.n	80049d4 <_printf_i+0x130>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	464a      	mov	r2, r9
 8004a90:	4639      	mov	r1, r7
 8004a92:	4630      	mov	r0, r6
 8004a94:	47c0      	blx	r8
 8004a96:	3001      	adds	r0, #1
 8004a98:	d09a      	beq.n	80049d0 <_printf_i+0x12c>
 8004a9a:	3501      	adds	r5, #1
 8004a9c:	68e3      	ldr	r3, [r4, #12]
 8004a9e:	9a03      	ldr	r2, [sp, #12]
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	42ab      	cmp	r3, r5
 8004aa4:	dcf2      	bgt.n	8004a8c <_printf_i+0x1e8>
 8004aa6:	e7eb      	b.n	8004a80 <_printf_i+0x1dc>
 8004aa8:	2500      	movs	r5, #0
 8004aaa:	f104 0919 	add.w	r9, r4, #25
 8004aae:	e7f5      	b.n	8004a9c <_printf_i+0x1f8>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ac      	bne.n	8004a0e <_printf_i+0x16a>
 8004ab4:	7803      	ldrb	r3, [r0, #0]
 8004ab6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004aba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004abe:	e76c      	b.n	800499a <_printf_i+0xf6>
 8004ac0:	08004e15 	.word	0x08004e15
 8004ac4:	08004e26 	.word	0x08004e26

08004ac8 <_sbrk_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	4c06      	ldr	r4, [pc, #24]	; (8004ae4 <_sbrk_r+0x1c>)
 8004acc:	2300      	movs	r3, #0
 8004ace:	4605      	mov	r5, r0
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	6023      	str	r3, [r4, #0]
 8004ad4:	f7fc f8b6 	bl	8000c44 <_sbrk>
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	d102      	bne.n	8004ae2 <_sbrk_r+0x1a>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	b103      	cbz	r3, 8004ae2 <_sbrk_r+0x1a>
 8004ae0:	602b      	str	r3, [r5, #0]
 8004ae2:	bd38      	pop	{r3, r4, r5, pc}
 8004ae4:	20000478 	.word	0x20000478

08004ae8 <__sread>:
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	460c      	mov	r4, r1
 8004aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af0:	f000 f8e0 	bl	8004cb4 <_read_r>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	bfab      	itete	ge
 8004af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004afa:	89a3      	ldrhlt	r3, [r4, #12]
 8004afc:	181b      	addge	r3, r3, r0
 8004afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b02:	bfac      	ite	ge
 8004b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b06:	81a3      	strhlt	r3, [r4, #12]
 8004b08:	bd10      	pop	{r4, pc}

08004b0a <__swrite>:
 8004b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0e:	461f      	mov	r7, r3
 8004b10:	898b      	ldrh	r3, [r1, #12]
 8004b12:	05db      	lsls	r3, r3, #23
 8004b14:	4605      	mov	r5, r0
 8004b16:	460c      	mov	r4, r1
 8004b18:	4616      	mov	r6, r2
 8004b1a:	d505      	bpl.n	8004b28 <__swrite+0x1e>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b24:	f000 f868 	bl	8004bf8 <_lseek_r>
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b32:	81a3      	strh	r3, [r4, #12]
 8004b34:	4632      	mov	r2, r6
 8004b36:	463b      	mov	r3, r7
 8004b38:	4628      	mov	r0, r5
 8004b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3e:	f000 b817 	b.w	8004b70 <_write_r>

08004b42 <__sseek>:
 8004b42:	b510      	push	{r4, lr}
 8004b44:	460c      	mov	r4, r1
 8004b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b4a:	f000 f855 	bl	8004bf8 <_lseek_r>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	bf15      	itete	ne
 8004b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b5e:	81a3      	strheq	r3, [r4, #12]
 8004b60:	bf18      	it	ne
 8004b62:	81a3      	strhne	r3, [r4, #12]
 8004b64:	bd10      	pop	{r4, pc}

08004b66 <__sclose>:
 8004b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6a:	f000 b813 	b.w	8004b94 <_close_r>
	...

08004b70 <_write_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4c07      	ldr	r4, [pc, #28]	; (8004b90 <_write_r+0x20>)
 8004b74:	4605      	mov	r5, r0
 8004b76:	4608      	mov	r0, r1
 8004b78:	4611      	mov	r1, r2
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	6022      	str	r2, [r4, #0]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f7fb fe0a 	bl	8000798 <_write>
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	d102      	bne.n	8004b8e <_write_r+0x1e>
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	b103      	cbz	r3, 8004b8e <_write_r+0x1e>
 8004b8c:	602b      	str	r3, [r5, #0]
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
 8004b90:	20000478 	.word	0x20000478

08004b94 <_close_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4c06      	ldr	r4, [pc, #24]	; (8004bb0 <_close_r+0x1c>)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	f7fc f81b 	bl	8000bda <_close>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_close_r+0x1a>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_close_r+0x1a>
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	20000478 	.word	0x20000478

08004bb4 <_fstat_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4c07      	ldr	r4, [pc, #28]	; (8004bd4 <_fstat_r+0x20>)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4605      	mov	r5, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	f7fc f816 	bl	8000bf2 <_fstat>
 8004bc6:	1c43      	adds	r3, r0, #1
 8004bc8:	d102      	bne.n	8004bd0 <_fstat_r+0x1c>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	b103      	cbz	r3, 8004bd0 <_fstat_r+0x1c>
 8004bce:	602b      	str	r3, [r5, #0]
 8004bd0:	bd38      	pop	{r3, r4, r5, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000478 	.word	0x20000478

08004bd8 <_isatty_r>:
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	4c06      	ldr	r4, [pc, #24]	; (8004bf4 <_isatty_r+0x1c>)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	4605      	mov	r5, r0
 8004be0:	4608      	mov	r0, r1
 8004be2:	6023      	str	r3, [r4, #0]
 8004be4:	f7fc f815 	bl	8000c12 <_isatty>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	d102      	bne.n	8004bf2 <_isatty_r+0x1a>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	b103      	cbz	r3, 8004bf2 <_isatty_r+0x1a>
 8004bf0:	602b      	str	r3, [r5, #0]
 8004bf2:	bd38      	pop	{r3, r4, r5, pc}
 8004bf4:	20000478 	.word	0x20000478

08004bf8 <_lseek_r>:
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	4c07      	ldr	r4, [pc, #28]	; (8004c18 <_lseek_r+0x20>)
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	4608      	mov	r0, r1
 8004c00:	4611      	mov	r1, r2
 8004c02:	2200      	movs	r2, #0
 8004c04:	6022      	str	r2, [r4, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	f7fc f80e 	bl	8000c28 <_lseek>
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	d102      	bne.n	8004c16 <_lseek_r+0x1e>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	b103      	cbz	r3, 8004c16 <_lseek_r+0x1e>
 8004c14:	602b      	str	r3, [r5, #0]
 8004c16:	bd38      	pop	{r3, r4, r5, pc}
 8004c18:	20000478 	.word	0x20000478

08004c1c <memcpy>:
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	1e43      	subs	r3, r0, #1
 8004c20:	440a      	add	r2, r1
 8004c22:	4291      	cmp	r1, r2
 8004c24:	d100      	bne.n	8004c28 <memcpy+0xc>
 8004c26:	bd10      	pop	{r4, pc}
 8004c28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c30:	e7f7      	b.n	8004c22 <memcpy+0x6>

08004c32 <memmove>:
 8004c32:	4288      	cmp	r0, r1
 8004c34:	b510      	push	{r4, lr}
 8004c36:	eb01 0302 	add.w	r3, r1, r2
 8004c3a:	d807      	bhi.n	8004c4c <memmove+0x1a>
 8004c3c:	1e42      	subs	r2, r0, #1
 8004c3e:	4299      	cmp	r1, r3
 8004c40:	d00a      	beq.n	8004c58 <memmove+0x26>
 8004c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c46:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004c4a:	e7f8      	b.n	8004c3e <memmove+0xc>
 8004c4c:	4283      	cmp	r3, r0
 8004c4e:	d9f5      	bls.n	8004c3c <memmove+0xa>
 8004c50:	1881      	adds	r1, r0, r2
 8004c52:	1ad2      	subs	r2, r2, r3
 8004c54:	42d3      	cmn	r3, r2
 8004c56:	d100      	bne.n	8004c5a <memmove+0x28>
 8004c58:	bd10      	pop	{r4, pc}
 8004c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c5e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004c62:	e7f7      	b.n	8004c54 <memmove+0x22>

08004c64 <__malloc_lock>:
 8004c64:	4770      	bx	lr

08004c66 <__malloc_unlock>:
 8004c66:	4770      	bx	lr

08004c68 <_realloc_r>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	4607      	mov	r7, r0
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	460e      	mov	r6, r1
 8004c70:	b921      	cbnz	r1, 8004c7c <_realloc_r+0x14>
 8004c72:	4611      	mov	r1, r2
 8004c74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c78:	f7ff bbf2 	b.w	8004460 <_malloc_r>
 8004c7c:	b922      	cbnz	r2, 8004c88 <_realloc_r+0x20>
 8004c7e:	f7ff fba1 	bl	80043c4 <_free_r>
 8004c82:	4625      	mov	r5, r4
 8004c84:	4628      	mov	r0, r5
 8004c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c88:	f000 f826 	bl	8004cd8 <_malloc_usable_size_r>
 8004c8c:	42a0      	cmp	r0, r4
 8004c8e:	d20f      	bcs.n	8004cb0 <_realloc_r+0x48>
 8004c90:	4621      	mov	r1, r4
 8004c92:	4638      	mov	r0, r7
 8004c94:	f7ff fbe4 	bl	8004460 <_malloc_r>
 8004c98:	4605      	mov	r5, r0
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d0f2      	beq.n	8004c84 <_realloc_r+0x1c>
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4622      	mov	r2, r4
 8004ca2:	f7ff ffbb 	bl	8004c1c <memcpy>
 8004ca6:	4631      	mov	r1, r6
 8004ca8:	4638      	mov	r0, r7
 8004caa:	f7ff fb8b 	bl	80043c4 <_free_r>
 8004cae:	e7e9      	b.n	8004c84 <_realloc_r+0x1c>
 8004cb0:	4635      	mov	r5, r6
 8004cb2:	e7e7      	b.n	8004c84 <_realloc_r+0x1c>

08004cb4 <_read_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4c07      	ldr	r4, [pc, #28]	; (8004cd4 <_read_r+0x20>)
 8004cb8:	4605      	mov	r5, r0
 8004cba:	4608      	mov	r0, r1
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	6022      	str	r2, [r4, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f7fb ff6c 	bl	8000ba0 <_read>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_read_r+0x1e>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_read_r+0x1e>
 8004cd0:	602b      	str	r3, [r5, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	20000478 	.word	0x20000478

08004cd8 <_malloc_usable_size_r>:
 8004cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cdc:	1f18      	subs	r0, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bfbc      	itt	lt
 8004ce2:	580b      	ldrlt	r3, [r1, r0]
 8004ce4:	18c0      	addlt	r0, r0, r3
 8004ce6:	4770      	bx	lr

08004ce8 <_init>:
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	bf00      	nop
 8004cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cee:	bc08      	pop	{r3}
 8004cf0:	469e      	mov	lr, r3
 8004cf2:	4770      	bx	lr

08004cf4 <_fini>:
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf6:	bf00      	nop
 8004cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfa:	bc08      	pop	{r3}
 8004cfc:	469e      	mov	lr, r3
 8004cfe:	4770      	bx	lr
